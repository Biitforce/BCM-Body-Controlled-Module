
CAN_Normal_Mode_2Nodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  20000070  08003278  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000016c  08003278  0002016c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f53a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f97  00000000  00000000  0002f5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000924b  00000000  00000000  00031571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000bf8  00000000  00000000  0003a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000bb0  00000000  00000000  0003b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022b81  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010624  00000000  00000000  0005eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cb9f9  00000000  00000000  0006f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0013ab06  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002378  00000000  00000000  0013ab58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800310c 	.word	0x0800310c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800310c 	.word	0x0800310c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_InitTick+0x40>)
 80005ca:	7818      	ldrb	r0, [r3, #0]
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <HAL_InitTick+0x44>)
 80005d6:	6810      	ldr	r0, [r2, #0]
 80005d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005dc:	f000 fc7c 	bl	8000ed8 <HAL_SYSTICK_Config>
 80005e0:	b968      	cbnz	r0, 80005fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	2c0f      	cmp	r4, #15
 80005e4:	d901      	bls.n	80005ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005e6:	2001      	movs	r0, #1
 80005e8:	e00a      	b.n	8000600 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	4621      	mov	r1, r4
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 fc2d 	bl	8000e50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_InitTick+0x40>)
 80005f8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2000      	movs	r0, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005fe:	2001      	movs	r0, #1
}
 8000600:	bd10      	pop	{r4, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20000008 	.word	0x20000008

0800060c <HAL_Init>:
{
 800060c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <HAL_Init+0x30>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000616:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000626:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fbff 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffc8 	bl	80005c4 <HAL_InitTick>
  HAL_MspInit();
 8000634:	f001 ffc6 	bl	80025c4 <HAL_MspInit>
}
 8000638:	2000      	movs	r0, #0
 800063a:	bd08      	pop	{r3, pc}
 800063c:	40023c00 	.word	0x40023c00

08000640 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <HAL_IncTick+0x10>)
 8000642:	6811      	ldr	r1, [r2, #0]
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_IncTick+0x14>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	440b      	add	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_GetTick+0x8>)
 800065a:	6818      	ldr	r0, [r3, #0]
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000008c 	.word	0x2000008c

08000664 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000664:	2800      	cmp	r0, #0
 8000666:	f000 80a1 	beq.w	80007ac <HAL_CAN_Init+0x148>
{
 800066a:	b538      	push	{r3, r4, r5, lr}
 800066c:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800066e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000672:	b1d3      	cbz	r3, 80006aa <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000674:	6822      	ldr	r2, [r4, #0]
 8000676:	6813      	ldr	r3, [r2, #0]
 8000678:	f023 0302 	bic.w	r3, r3, #2
 800067c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800067e:	f7ff ffeb 	bl	8000658 <HAL_GetTick>
 8000682:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	f012 0f02 	tst.w	r2, #2
 800068c:	d010      	beq.n	80006b0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800068e:	f7ff ffe3 	bl	8000658 <HAL_GetTick>
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	280a      	cmp	r0, #10
 8000696:	d9f5      	bls.n	8000684 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006a0:	2305      	movs	r3, #5
 80006a2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80006a8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80006aa:	f001 ffe3 	bl	8002674 <HAL_CAN_MspInit>
 80006ae:	e7e1      	b.n	8000674 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80006b8:	f7ff ffce 	bl	8000658 <HAL_GetTick>
 80006bc:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	f012 0f01 	tst.w	r2, #1
 80006c6:	d10d      	bne.n	80006e4 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006c8:	f7ff ffc6 	bl	8000658 <HAL_GetTick>
 80006cc:	1b40      	subs	r0, r0, r5
 80006ce:	280a      	cmp	r0, #10
 80006d0:	d9f5      	bls.n	80006be <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80006da:	2305      	movs	r3, #5
 80006dc:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
 80006e2:	e7e1      	b.n	80006a8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e4:	7e22      	ldrb	r2, [r4, #24]
 80006e6:	2a01      	cmp	r2, #1
 80006e8:	d03d      	beq.n	8000766 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006f0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80006f2:	7e63      	ldrb	r3, [r4, #25]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d03b      	beq.n	8000770 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f8:	6822      	ldr	r2, [r4, #0]
 80006fa:	6813      	ldr	r3, [r2, #0]
 80006fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000700:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000702:	7ea3      	ldrb	r3, [r4, #26]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d039      	beq.n	800077c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000708:	6822      	ldr	r2, [r4, #0]
 800070a:	6813      	ldr	r3, [r2, #0]
 800070c:	f023 0320 	bic.w	r3, r3, #32
 8000710:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000712:	7ee3      	ldrb	r3, [r4, #27]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d037      	beq.n	8000788 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000718:	6822      	ldr	r2, [r4, #0]
 800071a:	6813      	ldr	r3, [r2, #0]
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000722:	7f23      	ldrb	r3, [r4, #28]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d035      	beq.n	8000794 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000728:	6822      	ldr	r2, [r4, #0]
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	f023 0308 	bic.w	r3, r3, #8
 8000730:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000732:	7f63      	ldrb	r3, [r4, #29]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d033      	beq.n	80007a0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000738:	6822      	ldr	r2, [r4, #0]
 800073a:	6813      	ldr	r3, [r2, #0]
 800073c:	f023 0304 	bic.w	r3, r3, #4
 8000740:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000742:	68a3      	ldr	r3, [r4, #8]
 8000744:	68e2      	ldr	r2, [r4, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	6922      	ldr	r2, [r4, #16]
 800074a:	4313      	orrs	r3, r2
 800074c:	6962      	ldr	r2, [r4, #20]
 800074e:	4313      	orrs	r3, r2
 8000750:	6862      	ldr	r2, [r4, #4]
 8000752:	3a01      	subs	r2, #1
 8000754:	6821      	ldr	r1, [r4, #0]
 8000756:	4313      	orrs	r3, r2
 8000758:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800075a:	2000      	movs	r0, #0
 800075c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800075e:	2301      	movs	r3, #1
 8000760:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000764:	e7a0      	b.n	80006a8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e7c0      	b.n	80006f2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000770:	6822      	ldr	r2, [r4, #0]
 8000772:	6813      	ldr	r3, [r2, #0]
 8000774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e7c2      	b.n	8000702 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	6813      	ldr	r3, [r2, #0]
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e7c4      	b.n	8000712 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000788:	6822      	ldr	r2, [r4, #0]
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	f023 0310 	bic.w	r3, r3, #16
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e7c6      	b.n	8000722 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000794:	6822      	ldr	r2, [r4, #0]
 8000796:	6813      	ldr	r3, [r2, #0]
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	e7c8      	b.n	8000732 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	6813      	ldr	r3, [r2, #0]
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e7ca      	b.n	8000742 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80007ac:	2001      	movs	r0, #1
}
 80007ae:	4770      	bx	lr

080007b0 <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80007b0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d00a      	beq.n	80007d0 <HAL_CAN_ConfigFilter+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80007ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007be:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d005      	beq.n	80007d0 <HAL_CAN_ConfigFilter+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ca:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007cc:	2001      	movs	r0, #1
  }
}
 80007ce:	4770      	bx	lr
{
 80007d0:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 80007d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007d8:	f042 0201 	orr.w	r2, r2, #1
 80007dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80007e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007e4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80007e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80007ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007f0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80007f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80007f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80007fa:	694a      	ldr	r2, [r1, #20]
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000802:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8000806:	ea6f 0c02 	mvn.w	ip, r2
 800080a:	ea20 0002 	bic.w	r0, r0, r2
 800080e:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000812:	69cb      	ldr	r3, [r1, #28]
 8000814:	b9c3      	cbnz	r3, 8000848 <HAL_CAN_ConfigFilter+0x98>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 8000818:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800081c:	ea0c 0000 	and.w	r0, ip, r0
 8000820:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000824:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000826:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000828:	68cd      	ldr	r5, [r1, #12]
 800082a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800082e:	3048      	adds	r0, #72	; 0x48
 8000830:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000834:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000836:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000838:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800083c:	694c      	ldr	r4, [r1, #20]
 800083e:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 8000842:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8000846:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000848:	69cb      	ldr	r3, [r1, #28]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d01e      	beq.n	800088c <HAL_CAN_ConfigFilter+0xdc>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800084e:	698b      	ldr	r3, [r1, #24]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d133      	bne.n	80008bc <HAL_CAN_ConfigFilter+0x10c>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000854:	4824      	ldr	r0, [pc, #144]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 8000856:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800085a:	ea0c 0303 	and.w	r3, ip, r3
 800085e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000862:	690b      	ldr	r3, [r1, #16]
 8000864:	bb8b      	cbnz	r3, 80008ca <HAL_CAN_ConfigFilter+0x11a>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 8000868:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800086c:	ea0c 0303 	and.w	r3, ip, r3
 8000870:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == ENABLE)
 8000874:	6a0b      	ldr	r3, [r1, #32]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d02e      	beq.n	80008d8 <HAL_CAN_ConfigFilter+0x128>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 800087c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000880:	f023 0301 	bic.w	r3, r3, #1
 8000884:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000888:	2000      	movs	r0, #0
}
 800088a:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 800088e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000892:	4310      	orrs	r0, r2
 8000894:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000898:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800089a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800089c:	680d      	ldr	r5, [r1, #0]
 800089e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a2:	3048      	adds	r0, #72	; 0x48
 80008a4:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008a8:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008aa:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008ac:	688d      	ldr	r5, [r1, #8]
 80008ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008b2:	3448      	adds	r4, #72	; 0x48
 80008b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80008b8:	6058      	str	r0, [r3, #4]
 80008ba:	e7c8      	b.n	800084e <HAL_CAN_ConfigFilter+0x9e>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 80008be:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80008c2:	4313      	orrs	r3, r2
 80008c4:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 80008c8:	e7cb      	b.n	8000862 <HAL_CAN_ConfigFilter+0xb2>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 80008cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80008d0:	4313      	orrs	r3, r2
 80008d2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 80008d6:	e7cd      	b.n	8000874 <HAL_CAN_ConfigFilter+0xc4>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80008d8:	4903      	ldr	r1, [pc, #12]	; (80008e8 <HAL_CAN_ConfigFilter+0x138>)
 80008da:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 80008de:	431a      	orrs	r2, r3
 80008e0:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 80008e4:	e7c9      	b.n	800087a <HAL_CAN_ConfigFilter+0xca>
 80008e6:	bf00      	nop
 80008e8:	40006400 	.word	0x40006400

080008ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 80008f0:	f890 5020 	ldrb.w	r5, [r0, #32]
 80008f4:	b2ed      	uxtb	r5, r5
 80008f6:	2d01      	cmp	r5, #1
 80008f8:	d006      	beq.n	8000908 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80008fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000902:	2501      	movs	r5, #1
  }
}
 8000904:	4628      	mov	r0, r5
 8000906:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000908:	2302      	movs	r3, #2
 800090a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	6813      	ldr	r3, [r2, #0]
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000918:	f7ff fe9e 	bl	8000658 <HAL_GetTick>
 800091c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f013 0f01 	tst.w	r3, #1
 8000926:	d00c      	beq.n	8000942 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000928:	f7ff fe96 	bl	8000658 <HAL_GetTick>
 800092c:	1b83      	subs	r3, r0, r6
 800092e:	2b0a      	cmp	r3, #10
 8000930:	d9f5      	bls.n	800091e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800093a:	2305      	movs	r3, #5
 800093c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000940:	e7e0      	b.n	8000904 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000942:	2500      	movs	r5, #0
 8000944:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000946:	e7dd      	b.n	8000904 <HAL_CAN_Start+0x18>

08000948 <HAL_CAN_AddTxMessage>:
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000948:	f890 c020 	ldrb.w	ip, [r0, #32]
 800094c:	fa5f fc8c 	uxtb.w	ip, ip
 8000950:	f1bc 0f01 	cmp.w	ip, #1
 8000954:	d006      	beq.n	8000964 <HAL_CAN_AddTxMessage+0x1c>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000956:	f890 c020 	ldrb.w	ip, [r0, #32]
 800095a:	fa5f fc8c 	uxtb.w	ip, ip
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800095e:	f1bc 0f02 	cmp.w	ip, #2
 8000962:	d16f      	bne.n	8000a44 <HAL_CAN_AddTxMessage+0xfc>
{
 8000964:	b430      	push	{r4, r5}
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000966:	6804      	ldr	r4, [r0, #0]
 8000968:	68a5      	ldr	r5, [r4, #8]
 800096a:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 800096e:	d107      	bne.n	8000980 <HAL_CAN_AddTxMessage+0x38>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000970:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000972:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 8000976:	d103      	bne.n	8000980 <HAL_CAN_AddTxMessage+0x38>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8000978:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800097a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800097e:	d05b      	beq.n	8000a38 <HAL_CAN_AddTxMessage+0xf0>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000980:	68a4      	ldr	r4, [r4, #8]
 8000982:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8000986:	2401      	movs	r4, #1
 8000988:	fa04 f40c 	lsl.w	r4, r4, ip
 800098c:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800098e:	688b      	ldr	r3, [r1, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d13e      	bne.n	8000a12 <HAL_CAN_AddTxMessage+0xca>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000994:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8000996:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000998:	6804      	ldr	r4, [r0, #0]
 800099a:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800099e:	f10c 0318 	add.w	r3, ip, #24
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	690c      	ldr	r4, [r1, #16]
 80009aa:	f10c 0518 	add.w	r5, ip, #24
 80009ae:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80009b2:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009b4:	7d0b      	ldrb	r3, [r1, #20]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d036      	beq.n	8000a28 <HAL_CAN_AddTxMessage+0xe0>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80009ba:	79d1      	ldrb	r1, [r2, #7]
 80009bc:	7993      	ldrb	r3, [r2, #6]
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80009c4:	7951      	ldrb	r1, [r2, #5]
 80009c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80009ca:	7914      	ldrb	r4, [r2, #4]
 80009cc:	6801      	ldr	r1, [r0, #0]
 80009ce:	4323      	orrs	r3, r4
 80009d0:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80009d4:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80009d8:	78d1      	ldrb	r1, [r2, #3]
 80009da:	7893      	ldrb	r3, [r2, #2]
 80009dc:	041b      	lsls	r3, r3, #16
 80009de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80009e2:	7851      	ldrb	r1, [r2, #1]
 80009e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80009e8:	7811      	ldrb	r1, [r2, #0]
 80009ea:	6802      	ldr	r2, [r0, #0]
 80009ec:	430b      	orrs	r3, r1
 80009ee:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80009f2:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80009f6:	6802      	ldr	r2, [r0, #0]
 80009f8:	f10c 0c18 	add.w	ip, ip, #24
 80009fc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000a00:	f852 300c 	ldr.w	r3, [r2, ip]
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8000a0c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000a0e:	bc30      	pop	{r4, r5}
 8000a10:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a12:	684c      	ldr	r4, [r1, #4]
 8000a14:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8000a18:	68cc      	ldr	r4, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a1a:	6805      	ldr	r5, [r0, #0]
                                                           pHeader->IDE |
 8000a1c:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a1e:	f10c 0418 	add.w	r4, ip, #24
 8000a22:	0124      	lsls	r4, r4, #4
 8000a24:	512b      	str	r3, [r5, r4]
 8000a26:	e7be      	b.n	80009a6 <HAL_CAN_AddTxMessage+0x5e>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8000a2e:	6859      	ldr	r1, [r3, #4]
 8000a30:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000a34:	6059      	str	r1, [r3, #4]
 8000a36:	e7c0      	b.n	80009ba <HAL_CAN_AddTxMessage+0x72>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8000a40:	2001      	movs	r0, #1
 8000a42:	e7e4      	b.n	8000a0e <HAL_CAN_AddTxMessage+0xc6>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
}
 8000a4e:	4770      	bx	lr

08000a50 <HAL_CAN_GetRxMessage>:
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000a50:	f890 c020 	ldrb.w	ip, [r0, #32]
 8000a54:	fa5f fc8c 	uxtb.w	ip, ip
 8000a58:	f1bc 0f01 	cmp.w	ip, #1
 8000a5c:	d007      	beq.n	8000a6e <HAL_CAN_GetRxMessage+0x1e>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000a5e:	f890 c020 	ldrb.w	ip, [r0, #32]
 8000a62:	fa5f fc8c 	uxtb.w	ip, ip
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000a66:	f1bc 0f02 	cmp.w	ip, #2
 8000a6a:	f040 8095 	bne.w	8000b98 <HAL_CAN_GetRxMessage+0x148>
{
 8000a6e:	b430      	push	{r4, r5}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a70:	b951      	cbnz	r1, 8000a88 <HAL_CAN_GetRxMessage+0x38>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8000a72:	6804      	ldr	r4, [r0, #0]
 8000a74:	68e4      	ldr	r4, [r4, #12]
 8000a76:	f014 0f03 	tst.w	r4, #3
 8000a7a:	d112      	bne.n	8000aa2 <HAL_CAN_GetRxMessage+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000a84:	2001      	movs	r0, #1
 8000a86:	e075      	b.n	8000b74 <HAL_CAN_GetRxMessage+0x124>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000a88:	2901      	cmp	r1, #1
 8000a8a:	d10a      	bne.n	8000aa2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000a8c:	6804      	ldr	r4, [r0, #0]
 8000a8e:	6924      	ldr	r4, [r4, #16]
 8000a90:	f014 0f03 	tst.w	r4, #3
 8000a94:	d105      	bne.n	8000aa2 <HAL_CAN_GetRxMessage+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9c:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	e068      	b.n	8000b74 <HAL_CAN_GetRxMessage+0x124>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000aa2:	f101 041b 	add.w	r4, r1, #27
 8000aa6:	0124      	lsls	r4, r4, #4
 8000aa8:	6805      	ldr	r5, [r0, #0]
 8000aaa:	592c      	ldr	r4, [r5, r4]
 8000aac:	f004 0404 	and.w	r4, r4, #4
 8000ab0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	d160      	bne.n	8000b78 <HAL_CAN_GetRxMessage+0x128>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ab6:	f101 041b 	add.w	r4, r1, #27
 8000aba:	0124      	lsls	r4, r4, #4
 8000abc:	6805      	ldr	r5, [r0, #0]
 8000abe:	592c      	ldr	r4, [r5, r4]
 8000ac0:	0d64      	lsrs	r4, r4, #21
 8000ac2:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000ac4:	6804      	ldr	r4, [r0, #0]
 8000ac6:	f101 0c1b 	add.w	ip, r1, #27
 8000aca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000ace:	f854 400c 	ldr.w	r4, [r4, ip]
 8000ad2:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8000ad6:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ad8:	6804      	ldr	r4, [r0, #0]
 8000ada:	4464      	add	r4, ip
 8000adc:	6864      	ldr	r4, [r4, #4]
 8000ade:	f004 040f 	and.w	r4, r4, #15
 8000ae2:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ae4:	6804      	ldr	r4, [r0, #0]
 8000ae6:	4464      	add	r4, ip
 8000ae8:	6864      	ldr	r4, [r4, #4]
 8000aea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000aee:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000af0:	6804      	ldr	r4, [r0, #0]
 8000af2:	4464      	add	r4, ip
 8000af4:	6864      	ldr	r4, [r4, #4]
 8000af6:	0c24      	lsrs	r4, r4, #16
 8000af8:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000afa:	6802      	ldr	r2, [r0, #0]
 8000afc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b00:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b04:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8000b06:	6802      	ldr	r2, [r0, #0]
 8000b08:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b0c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b10:	0a12      	lsrs	r2, r2, #8
 8000b12:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8000b14:	6802      	ldr	r2, [r0, #0]
 8000b16:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b1a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b1e:	0c12      	lsrs	r2, r2, #16
 8000b20:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8000b22:	6802      	ldr	r2, [r0, #0]
 8000b24:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b28:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b2c:	0e12      	lsrs	r2, r2, #24
 8000b2e:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8000b30:	6802      	ldr	r2, [r0, #0]
 8000b32:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b36:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b3a:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8000b3c:	6802      	ldr	r2, [r0, #0]
 8000b3e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b42:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b46:	0a12      	lsrs	r2, r2, #8
 8000b48:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8000b4a:	6802      	ldr	r2, [r0, #0]
 8000b4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b50:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b54:	0c12      	lsrs	r2, r2, #16
 8000b56:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000b58:	6802      	ldr	r2, [r0, #0]
 8000b5a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b5e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b62:	0e12      	lsrs	r2, r2, #24
 8000b64:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b66:	b979      	cbnz	r1, 8000b88 <HAL_CAN_GetRxMessage+0x138>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b68:	6802      	ldr	r2, [r0, #0]
 8000b6a:	68d3      	ldr	r3, [r2, #12]
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8000b72:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000b74:	bc30      	pop	{r4, r5}
 8000b76:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b78:	f101 041b 	add.w	r4, r1, #27
 8000b7c:	0124      	lsls	r4, r4, #4
 8000b7e:	6805      	ldr	r5, [r0, #0]
 8000b80:	592c      	ldr	r4, [r5, r4]
 8000b82:	08e4      	lsrs	r4, r4, #3
 8000b84:	6054      	str	r4, [r2, #4]
 8000b86:	e79d      	b.n	8000ac4 <HAL_CAN_GetRxMessage+0x74>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000b88:	2901      	cmp	r1, #1
 8000b8a:	d1f2      	bne.n	8000b72 <HAL_CAN_GetRxMessage+0x122>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b8c:	6802      	ldr	r2, [r0, #0]
 8000b8e:	6913      	ldr	r3, [r2, #16]
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	6113      	str	r3, [r2, #16]
 8000b96:	e7ec      	b.n	8000b72 <HAL_CAN_GetRxMessage+0x122>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000ba0:	2001      	movs	r0, #1
}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ba4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d00a      	beq.n	8000bc4 <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000bae:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000bb2:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d005      	beq.n	8000bc4 <HAL_CAN_ActivateNotification+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbe:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
  }
}
 8000bc2:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000bc4:	6802      	ldr	r2, [r0, #0]
 8000bc6:	6953      	ldr	r3, [r2, #20]
 8000bc8:	4319      	orrs	r1, r3
 8000bca:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000bcc:	2000      	movs	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000bd8:	4770      	bx	lr

08000bda <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000bda:	4770      	bx	lr

08000bdc <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000bdc:	4770      	bx	lr

08000bde <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000bde:	4770      	bx	lr

08000be0 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000be0:	4770      	bx	lr

08000be2 <HAL_CAN_IRQHandler>:
{
 8000be2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be6:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000be8:	6803      	ldr	r3, [r0, #0]
 8000bea:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bec:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bf0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bf2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bf6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bfa:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 8000bfe:	f014 0601 	ands.w	r6, r4, #1
 8000c02:	d03b      	beq.n	8000c7c <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8000c04:	f017 0601 	ands.w	r6, r7, #1
 8000c08:	d016      	beq.n	8000c38 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8000c0e:	f017 0f02 	tst.w	r7, #2
 8000c12:	d108      	bne.n	8000c26 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8000c14:	f017 0f04 	tst.w	r7, #4
 8000c18:	d10c      	bne.n	8000c34 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8000c1a:	f017 0608 	ands.w	r6, r7, #8
 8000c1e:	d006      	beq.n	8000c2e <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c20:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000c24:	e008      	b.n	8000c38 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c26:	f001 fa31 	bl	800208c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	e004      	b.n	8000c38 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c2e:	f7ff ffcf 	bl	8000bd0 <HAL_CAN_TxMailbox0AbortCallback>
 8000c32:	e001      	b.n	8000c38 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c34:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 8000c38:	f417 7f80 	tst.w	r7, #256	; 0x100
 8000c3c:	d00d      	beq.n	8000c5a <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8000c46:	f417 7f00 	tst.w	r7, #512	; 0x200
 8000c4a:	f040 8086 	bne.w	8000d5a <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8000c4e:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8000c52:	f000 8086 	beq.w	8000d62 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c56:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8000c5a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c5e:	d00d      	beq.n	8000c7c <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c66:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8000c68:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c6c:	f040 8083 	bne.w	8000d76 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8000c70:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8000c74:	f000 8083 	beq.w	8000d7e <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000c78:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8000c7c:	f014 0f08 	tst.w	r4, #8
 8000c80:	d007      	beq.n	8000c92 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8000c82:	f01b 0f10 	tst.w	fp, #16
 8000c86:	d004      	beq.n	8000c92 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c88:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	2210      	movs	r2, #16
 8000c90:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8000c92:	f014 0f04 	tst.w	r4, #4
 8000c96:	d002      	beq.n	8000c9e <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8000c98:	f01b 0f08 	tst.w	fp, #8
 8000c9c:	d179      	bne.n	8000d92 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 8000c9e:	f014 0f02 	tst.w	r4, #2
 8000ca2:	d004      	beq.n	8000cae <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f013 0f03 	tst.w	r3, #3
 8000cac:	d178      	bne.n	8000da0 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 8000cae:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000cb2:	d007      	beq.n	8000cc4 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8000cb4:	f01a 0f10 	tst.w	sl, #16
 8000cb8:	d004      	beq.n	8000cc4 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000cba:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8000cc4:	f014 0f20 	tst.w	r4, #32
 8000cc8:	d002      	beq.n	8000cd0 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8000cca:	f01a 0f08 	tst.w	sl, #8
 8000cce:	d16b      	bne.n	8000da8 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 8000cd0:	f014 0f10 	tst.w	r4, #16
 8000cd4:	d004      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f013 0f03 	tst.w	r3, #3
 8000cde:	d16a      	bne.n	8000db6 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 8000ce0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000ce4:	d002      	beq.n	8000cec <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8000ce6:	f018 0f10 	tst.w	r8, #16
 8000cea:	d168      	bne.n	8000dbe <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8000cec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000cf0:	d002      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8000cf2:	f018 0f08 	tst.w	r8, #8
 8000cf6:	d169      	bne.n	8000dcc <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8000cf8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000cfc:	d07a      	beq.n	8000df4 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8000cfe:	f018 0f04 	tst.w	r8, #4
 8000d02:	d074      	beq.n	8000dee <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8000d04:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000d08:	d004      	beq.n	8000d14 <HAL_CAN_IRQHandler+0x132>
 8000d0a:	f019 0f01 	tst.w	r9, #1
 8000d0e:	d001      	beq.n	8000d14 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d10:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8000d14:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000d18:	d004      	beq.n	8000d24 <HAL_CAN_IRQHandler+0x142>
 8000d1a:	f019 0f02 	tst.w	r9, #2
 8000d1e:	d001      	beq.n	8000d24 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d20:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8000d24:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000d28:	d004      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x152>
 8000d2a:	f019 0f04 	tst.w	r9, #4
 8000d2e:	d001      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d30:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8000d34:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000d38:	d059      	beq.n	8000dee <HAL_CAN_IRQHandler+0x20c>
 8000d3a:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000d3e:	d056      	beq.n	8000dee <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000d40:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000d44:	d065      	beq.n	8000e12 <HAL_CAN_IRQHandler+0x230>
 8000d46:	d858      	bhi.n	8000dfa <HAL_CAN_IRQHandler+0x218>
 8000d48:	f1b9 0f20 	cmp.w	r9, #32
 8000d4c:	d05e      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x22a>
 8000d4e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000d52:	d142      	bne.n	8000dda <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d54:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000d58:	e044      	b.n	8000de4 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f001 f9b4 	bl	80020c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8000d60:	e77b      	b.n	8000c5a <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8000d62:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8000d66:	d002      	beq.n	8000d6e <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d68:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000d6c:	e775      	b.n	8000c5a <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f7ff ff2f 	bl	8000bd2 <HAL_CAN_TxMailbox1AbortCallback>
 8000d74:	e771      	b.n	8000c5a <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d76:	4628      	mov	r0, r5
 8000d78:	f001 f9c4 	bl	8002104 <HAL_CAN_TxMailbox2CompleteCallback>
 8000d7c:	e77e      	b.n	8000c7c <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8000d7e:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8000d82:	d002      	beq.n	8000d8a <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d84:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000d88:	e778      	b.n	8000c7c <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f7ff ff22 	bl	8000bd4 <HAL_CAN_TxMailbox2AbortCallback>
 8000d90:	e774      	b.n	8000c7c <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d92:	682b      	ldr	r3, [r5, #0]
 8000d94:	2208      	movs	r2, #8
 8000d96:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f7ff ff1c 	bl	8000bd6 <HAL_CAN_RxFifo0FullCallback>
 8000d9e:	e77e      	b.n	8000c9e <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000da0:	4628      	mov	r0, r5
 8000da2:	f001 fbb9 	bl	8002518 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000da6:	e782      	b.n	8000cae <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	2208      	movs	r2, #8
 8000dac:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000dae:	4628      	mov	r0, r5
 8000db0:	f7ff ff13 	bl	8000bda <HAL_CAN_RxFifo1FullCallback>
 8000db4:	e78c      	b.n	8000cd0 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000db6:	4628      	mov	r0, r5
 8000db8:	f7ff ff0e 	bl	8000bd8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000dbc:	e790      	b.n	8000ce0 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000dc4:	4628      	mov	r0, r5
 8000dc6:	f7ff ff09 	bl	8000bdc <HAL_CAN_SleepCallback>
 8000dca:	e78f      	b.n	8000cec <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	2208      	movs	r2, #8
 8000dd0:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f7ff ff03 	bl	8000bde <HAL_CAN_WakeUpFromRxMsgCallback>
 8000dd8:	e78e      	b.n	8000cf8 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000dda:	f1b9 0f10 	cmp.w	r9, #16
 8000dde:	d101      	bne.n	8000de4 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000de0:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000de4:	682a      	ldr	r2, [r5, #0]
 8000de6:	6993      	ldr	r3, [r2, #24]
 8000de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dec:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000dee:	682b      	ldr	r3, [r5, #0]
 8000df0:	2204      	movs	r2, #4
 8000df2:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000df4:	b99e      	cbnz	r6, 8000e1e <HAL_CAN_IRQHandler+0x23c>
}
 8000df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000dfa:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000dfe:	d00b      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x236>
 8000e00:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8000e04:	d1ee      	bne.n	8000de4 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e06:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000e0a:	e7eb      	b.n	8000de4 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e0c:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000e10:	e7e8      	b.n	8000de4 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e12:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000e16:	e7e5      	b.n	8000de4 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e18:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000e1c:	e7e2      	b.n	8000de4 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e20:	431e      	orrs	r6, r3
 8000e22:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000e24:	4628      	mov	r0, r5
 8000e26:	f7ff fedb 	bl	8000be0 <HAL_CAN_ErrorCallback>
}
 8000e2a:	e7e4      	b.n	8000df6 <HAL_CAN_IRQHandler+0x214>

08000e2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e38:	0200      	lsls	r0, r0, #8
 8000e3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e48:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_NVIC_SetPriority+0x68>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5a:	f1c3 0c07 	rsb	ip, r3, #7
 8000e5e:	f1bc 0f04 	cmp.w	ip, #4
 8000e62:	bf28      	it	cs
 8000e64:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e68:	f103 0e04 	add.w	lr, r3, #4
 8000e6c:	f1be 0f06 	cmp.w	lr, #6
 8000e70:	d918      	bls.n	8000ea4 <HAL_NVIC_SetPriority+0x54>
 8000e72:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 3eff 	mov.w	lr, #4294967295
 8000e78:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e7c:	ea21 010c 	bic.w	r1, r1, ip
 8000e80:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e82:	fa0e f303 	lsl.w	r3, lr, r3
 8000e86:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	db0b      	blt.n	8000ea8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	0109      	lsls	r1, r1, #4
 8000e92:	b2c9      	uxtb	r1, r1
 8000e94:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e98:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e9c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ea0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e7e5      	b.n	8000e74 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	f000 000f 	and.w	r0, r0, #15
 8000eac:	0109      	lsls	r1, r1, #4
 8000eae:	b2c9      	uxtb	r1, r1
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_NVIC_SetPriority+0x6c>)
 8000eb2:	5419      	strb	r1, [r3, r0]
 8000eb4:	e7f4      	b.n	8000ea0 <HAL_NVIC_SetPriority+0x50>
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	e000ed14 	.word	0xe000ed14

08000ec0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ec0:	f000 021f 	and.w	r2, r0, #31
 8000ec4:	0940      	lsrs	r0, r0, #5
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	4a02      	ldr	r2, [pc, #8]	; (8000ed4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ecc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	3801      	subs	r0, #1
 8000eda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ede:	d20b      	bcs.n	8000ef8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ee4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <HAL_SYSTICK_Config+0x24>)
 8000ee8:	21f0      	movs	r1, #240	; 0xf0
 8000eea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eee:	2000      	movs	r0, #0
 8000ef0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ef8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f00:	2804      	cmp	r0, #4
 8000f02:	d006      	beq.n	8000f12 <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f04:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000f08:	6913      	ldr	r3, [r2, #16]
 8000f0a:	f023 0304 	bic.w	r3, r3, #4
 8000f0e:	6113      	str	r3, [r2, #16]
  }
}
 8000f10:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000f16:	6913      	ldr	r3, [r2, #16]
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6113      	str	r3, [r2, #16]
 8000f1e:	4770      	bx	lr

08000f20 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000f20:	4770      	bx	lr

08000f22 <HAL_SYSTICK_IRQHandler>:
{
 8000f22:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f24:	f7ff fffc 	bl	8000f20 <HAL_SYSTICK_Callback>
}
 8000f28:	bd08      	pop	{r3, pc}
	...

08000f2c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	f200 80d2 	bhi.w	80010d8 <HAL_GPIO_Init+0x1ac>
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	e03a      	b.n	8000fb0 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 8000f3e:	2200      	movs	r2, #0
 8000f40:	40aa      	lsls	r2, r5
 8000f42:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	3402      	adds	r4, #2
 8000f46:	4d65      	ldr	r5, [pc, #404]	; (80010dc <HAL_GPIO_Init+0x1b0>)
 8000f48:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4c:	4a64      	ldr	r2, [pc, #400]	; (80010e0 <HAL_GPIO_Init+0x1b4>)
 8000f4e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	ea6f 020c 	mvn.w	r2, ip
 8000f54:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f58:	684e      	ldr	r6, [r1, #4]
 8000f5a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000f5e:	d001      	beq.n	8000f64 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000f60:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000f64:	4c5e      	ldr	r4, [pc, #376]	; (80010e0 <HAL_GPIO_Init+0x1b4>)
 8000f66:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000f68:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6e:	684e      	ldr	r6, [r1, #4]
 8000f70:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000f74:	d001      	beq.n	8000f7a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000f76:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000f7a:	4c59      	ldr	r4, [pc, #356]	; (80010e0 <HAL_GPIO_Init+0x1b4>)
 8000f7c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f84:	684e      	ldr	r6, [r1, #4]
 8000f86:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000f8a:	d001      	beq.n	8000f90 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000f8c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000f90:	4c53      	ldr	r4, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x1b4>)
 8000f92:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000f94:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	684d      	ldr	r5, [r1, #4]
 8000f9a:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000f9e:	d001      	beq.n	8000fa4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000fa0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000fa4:	4c4e      	ldr	r4, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x1b4>)
 8000fa6:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa8:	3301      	adds	r3, #1
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f200 8092 	bhi.w	80010d4 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb4:	680c      	ldr	r4, [r1, #0]
 8000fb6:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000fba:	ea32 0404 	bics.w	r4, r2, r4
 8000fbe:	d1f3      	bne.n	8000fa8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	684c      	ldr	r4, [r1, #4]
 8000fc2:	2c02      	cmp	r4, #2
 8000fc4:	d001      	beq.n	8000fca <HAL_GPIO_Init+0x9e>
 8000fc6:	2c12      	cmp	r4, #18
 8000fc8:	d110      	bne.n	8000fec <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3U];
 8000fca:	08dd      	lsrs	r5, r3, #3
 8000fcc:	3508      	adds	r5, #8
 8000fce:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd2:	f003 0407 	and.w	r4, r3, #7
 8000fd6:	00a6      	lsls	r6, r4, #2
 8000fd8:	240f      	movs	r4, #15
 8000fda:	40b4      	lsls	r4, r6
 8000fdc:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	690c      	ldr	r4, [r1, #16]
 8000fe2:	40b4      	lsls	r4, r6
 8000fe4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000fe8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000fec:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ff2:	2403      	movs	r4, #3
 8000ff4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ff8:	43e5      	mvns	r5, r4
 8000ffa:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffe:	684c      	ldr	r4, [r1, #4]
 8001000:	f004 0403 	and.w	r4, r4, #3
 8001004:	fa04 f40e 	lsl.w	r4, r4, lr
 8001008:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 800100a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100c:	684c      	ldr	r4, [r1, #4]
 800100e:	1e66      	subs	r6, r4, #1
 8001010:	2e01      	cmp	r6, #1
 8001012:	d903      	bls.n	800101c <HAL_GPIO_Init+0xf0>
 8001014:	2c11      	cmp	r4, #17
 8001016:	d001      	beq.n	800101c <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001018:	2c12      	cmp	r4, #18
 800101a:	d10f      	bne.n	800103c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 800101c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101e:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001020:	68cc      	ldr	r4, [r1, #12]
 8001022:	fa04 f40e 	lsl.w	r4, r4, lr
 8001026:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001028:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800102a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001030:	684c      	ldr	r4, [r1, #4]
 8001032:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001036:	409c      	lsls	r4, r3
 8001038:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800103a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800103c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	688a      	ldr	r2, [r1, #8]
 8001042:	fa02 f20e 	lsl.w	r2, r2, lr
 8001046:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001048:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104a:	684a      	ldr	r2, [r1, #4]
 800104c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001050:	d0aa      	beq.n	8000fa8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2200      	movs	r2, #0
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_GPIO_Init+0x1b8>)
 8001058:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800105a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800105e:	6454      	str	r4, [r2, #68]	; 0x44
 8001060:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001062:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	089c      	lsrs	r4, r3, #2
 800106c:	1ca5      	adds	r5, r4, #2
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x1b0>)
 8001070:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	0095      	lsls	r5, r2, #2
 800107a:	220f      	movs	r2, #15
 800107c:	40aa      	lsls	r2, r5
 800107e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_GPIO_Init+0x1bc>)
 8001084:	4290      	cmp	r0, r2
 8001086:	f43f af5a 	beq.w	8000f3e <HAL_GPIO_Init+0x12>
 800108a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108e:	4290      	cmp	r0, r2
 8001090:	d016      	beq.n	80010c0 <HAL_GPIO_Init+0x194>
 8001092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001096:	4290      	cmp	r0, r2
 8001098:	d014      	beq.n	80010c4 <HAL_GPIO_Init+0x198>
 800109a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800109e:	4290      	cmp	r0, r2
 80010a0:	d012      	beq.n	80010c8 <HAL_GPIO_Init+0x19c>
 80010a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a6:	4290      	cmp	r0, r2
 80010a8:	d010      	beq.n	80010cc <HAL_GPIO_Init+0x1a0>
 80010aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d00e      	beq.n	80010d0 <HAL_GPIO_Init+0x1a4>
 80010b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b6:	4290      	cmp	r0, r2
 80010b8:	f43f af3f 	beq.w	8000f3a <HAL_GPIO_Init+0xe>
 80010bc:	2207      	movs	r2, #7
 80010be:	e73f      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 80010c0:	2201      	movs	r2, #1
 80010c2:	e73d      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 80010c4:	2202      	movs	r2, #2
 80010c6:	e73b      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 80010c8:	2203      	movs	r2, #3
 80010ca:	e739      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 80010cc:	2204      	movs	r2, #4
 80010ce:	e737      	b.n	8000f40 <HAL_GPIO_Init+0x14>
 80010d0:	2205      	movs	r2, #5
 80010d2:	e735      	b.n	8000f40 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80010d4:	b003      	add	sp, #12
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40013c00 	.word	0x40013c00
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	b10a      	cbz	r2, 80010f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	6181      	str	r1, [r0, #24]
 80010f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	6181      	str	r1, [r0, #24]
  }
}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010f8:	6943      	ldr	r3, [r0, #20]
 80010fa:	4059      	eors	r1, r3
 80010fc:	6141      	str	r1, [r0, #20]
}
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001104:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4203      	tst	r3, r0
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800110e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001110:	4b02      	ldr	r3, [pc, #8]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001112:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001114:	f7ff fff4 	bl	8001100 <HAL_GPIO_EXTI_Callback>
}
 8001118:	e7f9      	b.n	800110e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800111a:	bf00      	nop
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001120:	2800      	cmp	r0, #0
 8001122:	f000 809a 	beq.w	800125a <HAL_RCC_ClockConfig+0x13a>
{
 8001126:	b570      	push	{r4, r5, r6, lr}
 8001128:	460d      	mov	r5, r1
 800112a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b4f      	ldr	r3, [pc, #316]	; (800126c <HAL_RCC_ClockConfig+0x14c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	428b      	cmp	r3, r1
 8001136:	d208      	bcs.n	800114a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001138:	b2cb      	uxtb	r3, r1
 800113a:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_RCC_ClockConfig+0x14c>)
 800113c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	428b      	cmp	r3, r1
 8001146:	f040 808a 	bne.w	800125e <HAL_RCC_ClockConfig+0x13e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	f013 0f02 	tst.w	r3, #2
 8001150:	d017      	beq.n	8001182 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001152:	f013 0f04 	tst.w	r3, #4
 8001156:	d004      	beq.n	8001162 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 800115a:	6893      	ldr	r3, [r2, #8]
 800115c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001160:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f013 0f08 	tst.w	r3, #8
 8001168:	d004      	beq.n	8001174 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116a:	4a41      	ldr	r2, [pc, #260]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001174:	4a3e      	ldr	r2, [pc, #248]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 8001176:	6893      	ldr	r3, [r2, #8]
 8001178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800117c:	68a1      	ldr	r1, [r4, #8]
 800117e:	430b      	orrs	r3, r1
 8001180:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f013 0f01 	tst.w	r3, #1
 8001188:	d032      	beq.n	80011f0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	6863      	ldr	r3, [r4, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d021      	beq.n	80011d4 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001190:	1e9a      	subs	r2, r3, #2
 8001192:	2a01      	cmp	r2, #1
 8001194:	d925      	bls.n	80011e2 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	4a36      	ldr	r2, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	f012 0f02 	tst.w	r2, #2
 800119e:	d060      	beq.n	8001262 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a0:	4933      	ldr	r1, [pc, #204]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 80011a2:	688a      	ldr	r2, [r1, #8]
 80011a4:	f022 0203 	bic.w	r2, r2, #3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa54 	bl	8000658 <HAL_GetTick>
 80011b0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	6862      	ldr	r2, [r4, #4]
 80011bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011c0:	d016      	beq.n	80011f0 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c2:	f7ff fa49 	bl	8000658 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80011cc:	4298      	cmp	r0, r3
 80011ce:	d9f0      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80011d0:	2003      	movs	r0, #3
 80011d2:	e041      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80011dc:	d1e0      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
 80011e0:	e03a      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e2:	4a23      	ldr	r2, [pc, #140]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80011ea:	d1d9      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
 80011ee:	e033      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_RCC_ClockConfig+0x14c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	42ab      	cmp	r3, r5
 80011fa:	d907      	bls.n	800120c <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fc:	b2ea      	uxtb	r2, r5
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_RCC_ClockConfig+0x14c>)
 8001200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	42ab      	cmp	r3, r5
 800120a:	d12c      	bne.n	8001266 <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f013 0f04 	tst.w	r3, #4
 8001212:	d006      	beq.n	8001222 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 8001216:	6893      	ldr	r3, [r2, #8]
 8001218:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800121c:	68e1      	ldr	r1, [r4, #12]
 800121e:	430b      	orrs	r3, r1
 8001220:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f013 0f08 	tst.w	r3, #8
 8001228:	d007      	beq.n	800123a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 800122c:	6893      	ldr	r3, [r2, #8]
 800122e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001232:	6921      	ldr	r1, [r4, #16]
 8001234:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001238:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f845 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_ClockConfig+0x150>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_RCC_ClockConfig+0x154>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	40d8      	lsrs	r0, r3
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_ClockConfig+0x158>)
 800124e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff f9b7 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001256:	2000      	movs	r0, #0
}
 8001258:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
}
 800125c:	4770      	bx	lr
      return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e7fa      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
 8001264:	e7f8      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	e7f6      	b.n	8001258 <HAL_RCC_ClockConfig+0x138>
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00
 8001270:	40023800 	.word	0x40023800
 8001274:	08003124 	.word	0x08003124
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <HAL_RCC_GetHCLKFreq+0x8>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001288:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800128a:	f7ff fff7 	bl	800127c <HAL_RCC_GetHCLKFreq>
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001296:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
}
 800129a:	40d8      	lsrs	r0, r3
 800129c:	bd08      	pop	{r3, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	08003134 	.word	0x08003134

080012a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012aa:	f7ff ffe7 	bl	800127c <HAL_RCC_GetHCLKFreq>
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80012b6:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80012ba:	40d8      	lsrs	r0, r3
 80012bc:	bd08      	pop	{r3, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	08003134 	.word	0x08003134

080012c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c8:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d007      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x1e>
 80012d6:	2b0c      	cmp	r3, #12
 80012d8:	d05b      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0xca>
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80012de:	4858      	ldr	r0, [pc, #352]	; (8001440 <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012e2:	4858      	ldr	r0, [pc, #352]	; (8001444 <HAL_RCC_GetSysClockFreq+0x17c>)
 80012e4:	e7fc      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e6:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012f4:	d02a      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80012fe:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001302:	ebb1 000c 	subs.w	r0, r1, ip
 8001306:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800130a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800130e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001312:	0181      	lsls	r1, r0, #6
 8001314:	1a09      	subs	r1, r1, r0
 8001316:	eb63 030e 	sbc.w	r3, r3, lr
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001320:	00c9      	lsls	r1, r1, #3
 8001322:	eb11 0c0c 	adds.w	ip, r1, ip
 8001326:	f143 0300 	adc.w	r3, r3, #0
 800132a:	0259      	lsls	r1, r3, #9
 800132c:	2300      	movs	r3, #0
 800132e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001332:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001336:	f7fe ffc3 	bl	80002c0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800133a:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001342:	3301      	adds	r3, #1
 8001344:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001346:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800134a:	e7c9      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001354:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001358:	ebb1 000c 	subs.w	r0, r1, ip
 800135c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001360:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001364:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001368:	0181      	lsls	r1, r0, #6
 800136a:	1a09      	subs	r1, r1, r0
 800136c:	eb63 030e 	sbc.w	r3, r3, lr
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001376:	00c9      	lsls	r1, r1, #3
 8001378:	eb11 0c0c 	adds.w	ip, r1, ip
 800137c:	f143 0300 	adc.w	r3, r3, #0
 8001380:	0299      	lsls	r1, r3, #10
 8001382:	2300      	movs	r3, #0
 8001384:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001388:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800138c:	f7fe ff98 	bl	80002c0 <__aeabi_uldivmod>
 8001390:	e7d3      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80013a0:	d028      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80013aa:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80013ae:	ebb1 000c 	subs.w	r0, r1, ip
 80013b2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80013b6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80013ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013be:	0181      	lsls	r1, r0, #6
 80013c0:	1a09      	subs	r1, r1, r0
 80013c2:	eb63 030e 	sbc.w	r3, r3, lr
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013cc:	00c9      	lsls	r1, r1, #3
 80013ce:	eb11 0c0c 	adds.w	ip, r1, ip
 80013d2:	f143 0300 	adc.w	r3, r3, #0
 80013d6:	0259      	lsls	r1, r3, #9
 80013d8:	2300      	movs	r3, #0
 80013da:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80013de:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80013e2:	f7fe ff6d 	bl	80002c0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80013ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80013f2:	e775      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_GetSysClockFreq+0x174>)
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80013fc:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001400:	ebb1 000c 	subs.w	r0, r1, ip
 8001404:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001408:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800140c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001410:	0181      	lsls	r1, r0, #6
 8001412:	1a09      	subs	r1, r1, r0
 8001414:	eb63 030e 	sbc.w	r3, r3, lr
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800141e:	00c9      	lsls	r1, r1, #3
 8001420:	eb11 0c0c 	adds.w	ip, r1, ip
 8001424:	f143 0300 	adc.w	r3, r3, #0
 8001428:	0299      	lsls	r1, r3, #10
 800142a:	2300      	movs	r3, #0
 800142c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001430:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001434:	f7fe ff44 	bl	80002c0 <__aeabi_uldivmod>
 8001438:	e7d5      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x11e>
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	00f42400 	.word	0x00f42400
 8001444:	007a1200 	.word	0x007a1200

08001448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	6803      	ldr	r3, [r0, #0]
 8001450:	f013 0f01 	tst.w	r3, #1
 8001454:	d041      	beq.n	80014da <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001456:	4b9a      	ldr	r3, [pc, #616]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d032      	beq.n	80014c8 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001462:	4b97      	ldr	r3, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d027      	beq.n	80014be <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d059      	beq.n	800152e <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d05b      	beq.n	800153a <HAL_RCC_OscConfig+0xf2>
 8001482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001486:	d05e      	beq.n	8001546 <HAL_RCC_OscConfig+0xfe>
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001498:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05c      	beq.n	800155a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff f8da 	bl	8000658 <HAL_GetTick>
 80014a4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b86      	ldr	r3, [pc, #536]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014ae:	d114      	bne.n	80014da <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff f8d2 	bl	8000658 <HAL_GetTick>
 80014b4:	1b40      	subs	r0, r0, r5
 80014b6:	2864      	cmp	r0, #100	; 0x64
 80014b8:	d9f5      	bls.n	80014a6 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80014ba:	2003      	movs	r0, #3
 80014bc:	e19f      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014be:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014c6:	d0d2      	beq.n	800146e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014d0:	d003      	beq.n	80014da <HAL_RCC_OscConfig+0x92>
 80014d2:	6863      	ldr	r3, [r4, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 818d 	beq.w	80017f4 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	f013 0f02 	tst.w	r3, #2
 80014e0:	d060      	beq.n	80015a4 <HAL_RCC_OscConfig+0x15c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f013 0f0c 	tst.w	r3, #12
 80014ea:	d04a      	beq.n	8001582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014ec:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d03f      	beq.n	8001578 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d069      	beq.n	80015d8 <HAL_RCC_OscConfig+0x190>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	68e3      	ldr	r3, [r4, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d075      	beq.n	80015f6 <HAL_RCC_OscConfig+0x1ae>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150a:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <HAL_RCC_OscConfig+0x27c>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff f8a2 	bl	8000658 <HAL_GetTick>
 8001514:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f013 0f02 	tst.w	r3, #2
 800151e:	d161      	bne.n	80015e4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff f89a 	bl	8000658 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	2802      	cmp	r0, #2
 8001528:	d9f5      	bls.n	8001516 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800152a:	2003      	movs	r0, #3
 800152c:	e167      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001536:	d0a0      	beq.n	800147a <HAL_RCC_OscConfig+0x32>
 8001538:	e7c6      	b.n	80014c8 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	4a61      	ldr	r2, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e7a9      	b.n	800149a <HAL_RCC_OscConfig+0x52>
 8001546:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e79f      	b.n	800149a <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800155a:	f7ff f87d 	bl	8000658 <HAL_GetTick>
 800155e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001560:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001568:	d0b7      	beq.n	80014da <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff f875 	bl	8000658 <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	2864      	cmp	r0, #100	; 0x64
 8001572:	d9f5      	bls.n	8001560 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001574:	2003      	movs	r0, #3
 8001576:	e142      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001578:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001580:	d1ba      	bne.n	80014f8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f013 0f02 	tst.w	r3, #2
 800158a:	d003      	beq.n	8001594 <HAL_RCC_OscConfig+0x14c>
 800158c:	68e3      	ldr	r3, [r4, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	f040 8132 	bne.w	80017f8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800159c:	6921      	ldr	r1, [r4, #16]
 800159e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015a2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	f013 0f08 	tst.w	r3, #8
 80015aa:	d049      	beq.n	8001640 <HAL_RCC_OscConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ac:	6963      	ldr	r3, [r4, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d033      	beq.n	800161a <HAL_RCC_OscConfig+0x1d2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x27c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff f84d 	bl	8000658 <HAL_GetTick>
 80015be:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f013 0f02 	tst.w	r3, #2
 80015c8:	d13a      	bne.n	8001640 <HAL_RCC_OscConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff f845 	bl	8000658 <HAL_GetTick>
 80015ce:	1b40      	subs	r0, r0, r5
 80015d0:	2802      	cmp	r0, #2
 80015d2:	d9f5      	bls.n	80015c0 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80015d4:	2003      	movs	r0, #3
 80015d6:	e112      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015e0:	d190      	bne.n	8001504 <HAL_RCC_OscConfig+0xbc>
 80015e2:	e7ce      	b.n	8001582 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ec:	6921      	ldr	r1, [r4, #16]
 80015ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e7d6      	b.n	80015a4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015fc:	f7ff f82c 	bl	8000658 <HAL_GetTick>
 8001600:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f013 0f02 	tst.w	r3, #2
 800160a:	d0cb      	beq.n	80015a4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff f824 	bl	8000658 <HAL_GetTick>
 8001610:	1b40      	subs	r0, r0, r5
 8001612:	2802      	cmp	r0, #2
 8001614:	d9f5      	bls.n	8001602 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 8001616:	2003      	movs	r0, #3
 8001618:	e0f1      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_RCC_OscConfig+0x27c>)
 800161c:	2200      	movs	r2, #0
 800161e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff f819 	bl	8000658 <HAL_GetTick>
 8001626:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162c:	f013 0f02 	tst.w	r3, #2
 8001630:	d006      	beq.n	8001640 <HAL_RCC_OscConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff f811 	bl	8000658 <HAL_GetTick>
 8001636:	1b40      	subs	r0, r0, r5
 8001638:	2802      	cmp	r0, #2
 800163a:	d9f5      	bls.n	8001628 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
 800163e:	e0de      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	f013 0f04 	tst.w	r3, #4
 8001646:	d077      	beq.n	8001738 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001650:	d133      	bne.n	80016ba <HAL_RCC_OscConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800166a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_RCC_OscConfig+0x280>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001674:	d02a      	beq.n	80016cc <HAL_RCC_OscConfig+0x284>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001676:	68a3      	ldr	r3, [r4, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d03b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2ac>
 800167c:	2b05      	cmp	r3, #5
 800167e:	d03f      	beq.n	8001700 <HAL_RCC_OscConfig+0x2b8>
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 8001682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	671a      	str	r2, [r3, #112]	; 0x70
 800168a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800168c:	f022 0204 	bic.w	r2, r2, #4
 8001690:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001692:	68a3      	ldr	r3, [r4, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d03d      	beq.n	8001714 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7fe ffde 	bl	8000658 <HAL_GetTick>
 800169c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x278>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	f013 0f02 	tst.w	r3, #2
 80016a6:	d146      	bne.n	8001736 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7fe ffd6 	bl	8000658 <HAL_GetTick>
 80016ac:	1b80      	subs	r0, r0, r6
 80016ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80016b2:	4298      	cmp	r0, r3
 80016b4:	d9f3      	bls.n	800169e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e0a1      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2500      	movs	r5, #0
 80016bc:	e7d6      	b.n	800166c <HAL_RCC_OscConfig+0x224>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016cc:	4a4e      	ldr	r2, [pc, #312]	; (8001808 <HAL_RCC_OscConfig+0x3c0>)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016d6:	f7fe ffbf 	bl	8000658 <HAL_GetTick>
 80016da:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_RCC_OscConfig+0x3c0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016e4:	d1c7      	bne.n	8001676 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7fe ffb7 	bl	8000658 <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d9f5      	bls.n	80016dc <HAL_RCC_OscConfig+0x294>
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e084      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	4a45      	ldr	r2, [pc, #276]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 80016f6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	e7c8      	b.n	8001692 <HAL_RCC_OscConfig+0x24a>
 8001700:	4b42      	ldr	r3, [pc, #264]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 8001702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	671a      	str	r2, [r3, #112]	; 0x70
 800170a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	671a      	str	r2, [r3, #112]	; 0x70
 8001712:	e7be      	b.n	8001692 <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7fe ffa0 	bl	8000658 <HAL_GetTick>
 8001718:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f013 0f02 	tst.w	r3, #2
 8001722:	d008      	beq.n	8001736 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7fe ff98 	bl	8000658 <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	f241 3388 	movw	r3, #5000	; 0x1388
 800172e:	4298      	cmp	r0, r3
 8001730:	d9f3      	bls.n	800171a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
 8001734:	e063      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001736:	b9e5      	cbnz	r5, 8001772 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	69a3      	ldr	r3, [r4, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d05e      	beq.n	80017fc <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173e:	4a33      	ldr	r2, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 8001740:	6892      	ldr	r2, [r2, #8]
 8001742:	f002 020c 	and.w	r2, r2, #12
 8001746:	2a08      	cmp	r2, #8
 8001748:	d05b      	beq.n	8001802 <HAL_RCC_OscConfig+0x3ba>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	2b02      	cmp	r3, #2
 800174c:	d017      	beq.n	800177e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x3c8>)
 8001750:	2200      	movs	r2, #0
 8001752:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7fe ff80 	bl	8000658 <HAL_GetTick>
 8001758:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001762:	d045      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7fe ff78 	bl	8000658 <HAL_GetTick>
 8001768:	1b00      	subs	r0, r0, r4
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f5      	bls.n	800175a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e045      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 8001774:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	e7dc      	b.n	8001738 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x3c8>)
 8001780:	2200      	movs	r2, #0
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001784:	f7fe ff68 	bl	8000658 <HAL_GetTick>
 8001788:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001792:	d006      	beq.n	80017a2 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7fe ff60 	bl	8000658 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2802      	cmp	r0, #2
 800179c:	d9f5      	bls.n	800178a <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 800179e:	2003      	movs	r0, #3
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a2:	69e3      	ldr	r3, [r4, #28]
 80017a4:	6a22      	ldr	r2, [r4, #32]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017aa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017b0:	0852      	lsrs	r2, r2, #1
 80017b2:	3a01      	subs	r2, #1
 80017b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017c0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 80017c6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_OscConfig+0x3c8>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80017ce:	f7fe ff43 	bl	8000658 <HAL_GetTick>
 80017d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_OscConfig+0x3c4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7fe ff3b 	bl	8000658 <HAL_GetTick>
 80017e2:	1b00      	subs	r0, r0, r4
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f5      	bls.n	80017d4 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 80017e8:	2003      	movs	r0, #3
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e006      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
 80017f0:	2000      	movs	r0, #0
 80017f2:	e004      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e002      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 80017fc:	2000      	movs	r0, #0
}
 80017fe:	b002      	add	sp, #8
 8001800:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001802:	2001      	movs	r0, #1
 8001804:	e7fb      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000
 800180c:	40023800 	.word	0x40023800
 8001810:	42470000 	.word	0x42470000

08001814 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	68d3      	ldr	r3, [r2, #12]
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001828:	2000      	movs	r0, #0
 800182a:	4770      	bx	lr

0800182c <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800182c:	4770      	bx	lr

0800182e <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800182e:	4770      	bx	lr

08001830 <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001830:	4770      	bx	lr

08001832 <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001832:	4770      	bx	lr

08001834 <HAL_TIM_IRQHandler>:
{
 8001834:	b510      	push	{r4, lr}
 8001836:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	f012 0f02 	tst.w	r2, #2
 8001840:	d011      	beq.n	8001866 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	f012 0f02 	tst.w	r2, #2
 8001848:	d00d      	beq.n	8001866 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800184a:	f06f 0202 	mvn.w	r2, #2
 800184e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001850:	2301      	movs	r3, #1
 8001852:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001854:	6803      	ldr	r3, [r0, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f013 0f03 	tst.w	r3, #3
 800185c:	d070      	beq.n	8001940 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800185e:	f7ff ffe6 	bl	800182e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001862:	2300      	movs	r3, #0
 8001864:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	f012 0f04 	tst.w	r2, #4
 800186e:	d012      	beq.n	8001896 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	f012 0f04 	tst.w	r2, #4
 8001876:	d00e      	beq.n	8001896 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001878:	f06f 0204 	mvn.w	r2, #4
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800187e:	2302      	movs	r3, #2
 8001880:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f413 7f40 	tst.w	r3, #768	; 0x300
 800188a:	d05f      	beq.n	800194c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff ffce 	bl	800182e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	2300      	movs	r3, #0
 8001894:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	f012 0f08 	tst.w	r2, #8
 800189e:	d012      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	f012 0f08 	tst.w	r2, #8
 80018a6:	d00e      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018a8:	f06f 0208 	mvn.w	r2, #8
 80018ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ae:	2304      	movs	r3, #4
 80018b0:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f013 0f03 	tst.w	r3, #3
 80018ba:	d04e      	beq.n	800195a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ffb6 	bl	800182e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c2:	2300      	movs	r3, #0
 80018c4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	f012 0f10 	tst.w	r2, #16
 80018ce:	d012      	beq.n	80018f6 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	f012 0f10 	tst.w	r2, #16
 80018d6:	d00e      	beq.n	80018f6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018d8:	f06f 0210 	mvn.w	r2, #16
 80018dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018de:	2308      	movs	r3, #8
 80018e0:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018ea:	d03d      	beq.n	8001968 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff9e 	bl	800182e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f2:	2300      	movs	r3, #0
 80018f4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	f012 0f01 	tst.w	r2, #1
 80018fe:	d003      	beq.n	8001908 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	f012 0f01 	tst.w	r2, #1
 8001906:	d136      	bne.n	8001976 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001910:	d003      	beq.n	800191a <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001918:	d134      	bne.n	8001984 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001922:	d003      	beq.n	800192c <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	f012 0f40 	tst.w	r2, #64	; 0x40
 800192a:	d132      	bne.n	8001992 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	f012 0f20 	tst.w	r2, #32
 8001934:	d003      	beq.n	800193e <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	f012 0f20 	tst.w	r2, #32
 800193c:	d130      	bne.n	80019a0 <HAL_TIM_IRQHandler+0x16c>
}
 800193e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001940:	f7ff ff74 	bl	800182c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ff73 	bl	8001830 <HAL_TIM_PWM_PulseFinishedCallback>
 800194a:	e78a      	b.n	8001862 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff ff6d 	bl	800182c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ff6c 	bl	8001830 <HAL_TIM_PWM_PulseFinishedCallback>
 8001958:	e79b      	b.n	8001892 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff ff66 	bl	800182c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff ff65 	bl	8001830 <HAL_TIM_PWM_PulseFinishedCallback>
 8001966:	e7ac      	b.n	80018c2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff ff5f 	bl	800182c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff ff5e 	bl	8001830 <HAL_TIM_PWM_PulseFinishedCallback>
 8001974:	e7bd      	b.n	80018f2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001976:	f06f 0201 	mvn.w	r2, #1
 800197a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800197c:	4620      	mov	r0, r4
 800197e:	f000 fd83 	bl	8002488 <HAL_TIM_PeriodElapsedCallback>
 8001982:	e7c1      	b.n	8001908 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001988:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800198a:	4620      	mov	r0, r4
 800198c:	f000 f88b 	bl	8001aa6 <HAL_TIMEx_BreakCallback>
 8001990:	e7c3      	b.n	800191a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001996:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff ff4a 	bl	8001832 <HAL_TIM_TriggerCallback>
 800199e:	e7c5      	b.n	800192c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019a0:	f06f 0220 	mvn.w	r2, #32
 80019a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80019a6:	4620      	mov	r0, r4
 80019a8:	f000 f87c 	bl	8001aa4 <HAL_TIMEx_CommutationCallback>
}
 80019ac:	e7c7      	b.n	800193e <HAL_TIM_IRQHandler+0x10a>
	...

080019b0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80019b0:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019b2:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <TIM_Base_SetConfig+0xbc>)
 80019b4:	4290      	cmp	r0, r2
 80019b6:	d012      	beq.n	80019de <TIM_Base_SetConfig+0x2e>
 80019b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019bc:	d00f      	beq.n	80019de <TIM_Base_SetConfig+0x2e>
 80019be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019c2:	4290      	cmp	r0, r2
 80019c4:	d00b      	beq.n	80019de <TIM_Base_SetConfig+0x2e>
 80019c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ca:	4290      	cmp	r0, r2
 80019cc:	d007      	beq.n	80019de <TIM_Base_SetConfig+0x2e>
 80019ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d2:	4290      	cmp	r0, r2
 80019d4:	d003      	beq.n	80019de <TIM_Base_SetConfig+0x2e>
 80019d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019da:	4290      	cmp	r0, r2
 80019dc:	d103      	bne.n	80019e6 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019e2:	684a      	ldr	r2, [r1, #4]
 80019e4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <TIM_Base_SetConfig+0xbc>)
 80019e8:	4290      	cmp	r0, r2
 80019ea:	d02a      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 80019ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019f0:	d027      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 80019f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019f6:	4290      	cmp	r0, r2
 80019f8:	d023      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 80019fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fe:	4290      	cmp	r0, r2
 8001a00:	d01f      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d01b      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a0a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a0e:	4290      	cmp	r0, r2
 8001a10:	d017      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a12:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a16:	4290      	cmp	r0, r2
 8001a18:	d013      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a1e:	4290      	cmp	r0, r2
 8001a20:	d00f      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a26:	4290      	cmp	r0, r2
 8001a28:	d00b      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a2a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d007      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a36:	4290      	cmp	r0, r2
 8001a38:	d003      	beq.n	8001a42 <TIM_Base_SetConfig+0x92>
 8001a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a3e:	4290      	cmp	r0, r2
 8001a40:	d103      	bne.n	8001a4a <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a46:	68ca      	ldr	r2, [r1, #12]
 8001a48:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001a4a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a4c:	688b      	ldr	r3, [r1, #8]
 8001a4e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a50:	680b      	ldr	r3, [r1, #0]
 8001a52:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <TIM_Base_SetConfig+0xbc>)
 8001a56:	4298      	cmp	r0, r3
 8001a58:	d003      	beq.n	8001a62 <TIM_Base_SetConfig+0xb2>
 8001a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5e:	4298      	cmp	r0, r3
 8001a60:	d101      	bne.n	8001a66 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a62:	690b      	ldr	r3, [r1, #16]
 8001a64:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a66:	2301      	movs	r3, #1
 8001a68:	6143      	str	r3, [r0, #20]
}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001a70:	b1b0      	cbz	r0, 8001aa0 <HAL_TIM_Base_Init+0x30>
{ 
 8001a72:	b510      	push	{r4, lr}
 8001a74:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a7a:	b163      	cbz	r3, 8001a96 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a82:	4621      	mov	r1, r4
 8001a84:	f851 0b04 	ldr.w	r0, [r1], #4
 8001a88:	f7ff ff92 	bl	80019b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001a92:	2000      	movs	r0, #0
}
 8001a94:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a96:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001a9a:	f000 fe2d 	bl	80026f8 <HAL_TIM_Base_MspInit>
 8001a9e:	e7ed      	b.n	8001a7c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001aa0:	2001      	movs	r0, #1
}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aa6:	4770      	bx	lr

08001aa8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aac:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001aae:	6801      	ldr	r1, [r0, #0]
 8001ab0:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001ab2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ab6:	68c3      	ldr	r3, [r0, #12]
 8001ab8:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001aba:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001abc:	6801      	ldr	r1, [r0, #0]
 8001abe:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ac0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001ac4:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac8:	6883      	ldr	r3, [r0, #8]
 8001aca:	6900      	ldr	r0, [r0, #16]
 8001acc:	4303      	orrs	r3, r0
 8001ace:	6960      	ldr	r0, [r4, #20]
 8001ad0:	4303      	orrs	r3, r0
 8001ad2:	69e0      	ldr	r0, [r4, #28]
 8001ad4:	4303      	orrs	r3, r0
 8001ad6:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ad8:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001ada:	6821      	ldr	r1, [r4, #0]
 8001adc:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001ae2:	69a3      	ldr	r3, [r4, #24]
 8001ae4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ae6:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae8:	69e3      	ldr	r3, [r4, #28]
 8001aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aee:	d05e      	beq.n	8001bae <UART_SetConfig+0x106>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	4ab5      	ldr	r2, [pc, #724]	; (8001dc8 <UART_SetConfig+0x320>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f000 8110 	beq.w	8001d1a <UART_SetConfig+0x272>
 8001afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f000 810b 	beq.w	8001d1a <UART_SetConfig+0x272>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b04:	f7ff fbc0 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b10:	6865      	ldr	r5, [r4, #4]
 8001b12:	00ad      	lsls	r5, r5, #2
 8001b14:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b18:	4fac      	ldr	r7, [pc, #688]	; (8001dcc <UART_SetConfig+0x324>)
 8001b1a:	fba7 3505 	umull	r3, r5, r7, r5
 8001b1e:	096d      	lsrs	r5, r5, #5
 8001b20:	012e      	lsls	r6, r5, #4
 8001b22:	f7ff fbb1 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001b26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b2e:	6865      	ldr	r5, [r4, #4]
 8001b30:	00ad      	lsls	r5, r5, #2
 8001b32:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b36:	f7ff fba7 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b42:	6863      	ldr	r3, [r4, #4]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	fba7 2303 	umull	r2, r3, r7, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b54:	fb08 5313 	mls	r3, r8, r3, r5
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	3332      	adds	r3, #50	; 0x32
 8001b5c:	fba7 2303 	umull	r2, r3, r7, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b66:	18f5      	adds	r5, r6, r3
 8001b68:	f7ff fb8e 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001b6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b74:	6866      	ldr	r6, [r4, #4]
 8001b76:	00b6      	lsls	r6, r6, #2
 8001b78:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b7c:	f7ff fb84 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001b80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b88:	6863      	ldr	r3, [r4, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b90:	fba7 3000 	umull	r3, r0, r7, r0
 8001b94:	0940      	lsrs	r0, r0, #5
 8001b96:	fb08 6010 	mls	r0, r8, r0, r6
 8001b9a:	0100      	lsls	r0, r0, #4
 8001b9c:	3032      	adds	r0, #50	; 0x32
 8001b9e:	fba7 3700 	umull	r3, r7, r7, r0
 8001ba2:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	442f      	add	r7, r5
 8001baa:	609f      	str	r7, [r3, #8]
    }
  }
}
 8001bac:	e109      	b.n	8001dc2 <UART_SetConfig+0x31a>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	4a85      	ldr	r2, [pc, #532]	; (8001dc8 <UART_SetConfig+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d05a      	beq.n	8001c6c <UART_SetConfig+0x1c4>
 8001bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d056      	beq.n	8001c6c <UART_SetConfig+0x1c4>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bbe:	f7ff fb63 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001bc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bca:	6865      	ldr	r5, [r4, #4]
 8001bcc:	006d      	lsls	r5, r5, #1
 8001bce:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bd2:	4f7e      	ldr	r7, [pc, #504]	; (8001dcc <UART_SetConfig+0x324>)
 8001bd4:	fba7 3505 	umull	r3, r5, r7, r5
 8001bd8:	096d      	lsrs	r5, r5, #5
 8001bda:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8001bde:	f7ff fb53 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bea:	6866      	ldr	r6, [r4, #4]
 8001bec:	0076      	lsls	r6, r6, #1
 8001bee:	fbb0 f6f6 	udiv	r6, r0, r6
 8001bf2:	f7ff fb49 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001bf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bfe:	6865      	ldr	r5, [r4, #4]
 8001c00:	006d      	lsls	r5, r5, #1
 8001c02:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c06:	fba7 3505 	umull	r3, r5, r7, r5
 8001c0a:	096d      	lsrs	r5, r5, #5
 8001c0c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c10:	fb08 6515 	mls	r5, r8, r5, r6
 8001c14:	00ed      	lsls	r5, r5, #3
 8001c16:	3532      	adds	r5, #50	; 0x32
 8001c18:	fba7 3505 	umull	r3, r5, r7, r5
 8001c1c:	096d      	lsrs	r5, r5, #5
 8001c1e:	006d      	lsls	r5, r5, #1
 8001c20:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c24:	444d      	add	r5, r9
 8001c26:	f7ff fb2f 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001c2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c32:	6866      	ldr	r6, [r4, #4]
 8001c34:	0076      	lsls	r6, r6, #1
 8001c36:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c3a:	f7ff fb25 	bl	8001288 <HAL_RCC_GetPCLK1Freq>
 8001c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c46:	6863      	ldr	r3, [r4, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	fba7 2303 	umull	r2, r3, r7, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	fb08 6313 	mls	r3, r8, r3, r6
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	3332      	adds	r3, #50	; 0x32
 8001c5c:	fba7 3703 	umull	r3, r7, r7, r3
 8001c60:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	442f      	add	r7, r5
 8001c68:	609f      	str	r7, [r3, #8]
 8001c6a:	e0aa      	b.n	8001dc2 <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c6c:	f7ff fb1c 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c78:	6865      	ldr	r5, [r4, #4]
 8001c7a:	006d      	lsls	r5, r5, #1
 8001c7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c80:	4f52      	ldr	r7, [pc, #328]	; (8001dcc <UART_SetConfig+0x324>)
 8001c82:	fba7 3505 	umull	r3, r5, r7, r5
 8001c86:	096d      	lsrs	r5, r5, #5
 8001c88:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8001c8c:	f7ff fb0c 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c98:	6866      	ldr	r6, [r4, #4]
 8001c9a:	0076      	lsls	r6, r6, #1
 8001c9c:	fbb0 f6f6 	udiv	r6, r0, r6
 8001ca0:	f7ff fb02 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cac:	6865      	ldr	r5, [r4, #4]
 8001cae:	006d      	lsls	r5, r5, #1
 8001cb0:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cb4:	fba7 3505 	umull	r3, r5, r7, r5
 8001cb8:	096d      	lsrs	r5, r5, #5
 8001cba:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001cbe:	fb08 6515 	mls	r5, r8, r5, r6
 8001cc2:	00ed      	lsls	r5, r5, #3
 8001cc4:	3532      	adds	r5, #50	; 0x32
 8001cc6:	fba7 3505 	umull	r3, r5, r7, r5
 8001cca:	096d      	lsrs	r5, r5, #5
 8001ccc:	006d      	lsls	r5, r5, #1
 8001cce:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001cd2:	444d      	add	r5, r9
 8001cd4:	f7ff fae8 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ce0:	6866      	ldr	r6, [r4, #4]
 8001ce2:	0076      	lsls	r6, r6, #1
 8001ce4:	fbb0 f6f6 	udiv	r6, r0, r6
 8001ce8:	f7ff fade 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf4:	6863      	ldr	r3, [r4, #4]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfc:	fba7 2303 	umull	r2, r3, r7, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	fb08 6313 	mls	r3, r8, r3, r6
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	3332      	adds	r3, #50	; 0x32
 8001d0a:	fba7 3703 	umull	r3, r7, r7, r3
 8001d0e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	442f      	add	r7, r5
 8001d16:	609f      	str	r7, [r3, #8]
 8001d18:	e053      	b.n	8001dc2 <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d1a:	f7ff fac5 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d26:	6865      	ldr	r5, [r4, #4]
 8001d28:	00ad      	lsls	r5, r5, #2
 8001d2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d2e:	4f27      	ldr	r7, [pc, #156]	; (8001dcc <UART_SetConfig+0x324>)
 8001d30:	fba7 3505 	umull	r3, r5, r7, r5
 8001d34:	096d      	lsrs	r5, r5, #5
 8001d36:	012e      	lsls	r6, r5, #4
 8001d38:	f7ff fab6 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d44:	6865      	ldr	r5, [r4, #4]
 8001d46:	00ad      	lsls	r5, r5, #2
 8001d48:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d4c:	f7ff faac 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001d50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d60:	fba7 2303 	umull	r2, r3, r7, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001d6a:	fb08 5313 	mls	r3, r8, r3, r5
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	3332      	adds	r3, #50	; 0x32
 8001d72:	fba7 2303 	umull	r2, r3, r7, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	18f5      	adds	r5, r6, r3
 8001d7e:	f7ff fa93 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001d82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d8a:	6866      	ldr	r6, [r4, #4]
 8001d8c:	00b6      	lsls	r6, r6, #2
 8001d8e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d92:	f7ff fa89 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 8001d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da6:	fba7 3000 	umull	r3, r0, r7, r0
 8001daa:	0940      	lsrs	r0, r0, #5
 8001dac:	fb08 6010 	mls	r0, r8, r0, r6
 8001db0:	0100      	lsls	r0, r0, #4
 8001db2:	3032      	adds	r0, #50	; 0x32
 8001db4:	fba7 3700 	umull	r3, r7, r7, r0
 8001db8:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	442f      	add	r7, r5
 8001dc0:	609f      	str	r7, [r3, #8]
}
 8001dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	51eb851f 	.word	0x51eb851f

08001dd0 <UART_WaitOnFlagUntilTimeout>:
{
 8001dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	460f      	mov	r7, r1
 8001dd8:	4616      	mov	r6, r2
 8001dda:	4699      	mov	r9, r3
 8001ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001de0:	682c      	ldr	r4, [r5, #0]
 8001de2:	6824      	ldr	r4, [r4, #0]
 8001de4:	ea37 0304 	bics.w	r3, r7, r4
 8001de8:	bf0c      	ite	eq
 8001dea:	f04f 0c01 	moveq.w	ip, #1
 8001dee:	f04f 0c00 	movne.w	ip, #0
 8001df2:	45b4      	cmp	ip, r6
 8001df4:	d11f      	bne.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x66>
    if(Timeout != HAL_MAX_DELAY)
 8001df6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001dfa:	d0f1      	beq.n	8001de0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001dfc:	f1b8 0f00 	cmp.w	r8, #0
 8001e00:	d005      	beq.n	8001e0e <UART_WaitOnFlagUntilTimeout+0x3e>
 8001e02:	f7fe fc29 	bl	8000658 <HAL_GetTick>
 8001e06:	eba0 0009 	sub.w	r0, r0, r9
 8001e0a:	4540      	cmp	r0, r8
 8001e0c:	d9e8      	bls.n	8001de0 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e0e:	682a      	ldr	r2, [r5, #0]
 8001e10:	68d3      	ldr	r3, [r2, #12]
 8001e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e16:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e18:	682a      	ldr	r2, [r5, #0]
 8001e1a:	6953      	ldr	r3, [r2, #20]
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001e22:	2320      	movs	r3, #32
 8001e24:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e28:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001e32:	2003      	movs	r0, #3
 8001e34:	e000      	b.n	8001e38 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8001e36:	2000      	movs	r0, #0
}
 8001e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e3c <HAL_UART_Init>:
  if(huart == NULL)
 8001e3c:	b358      	cbz	r0, 8001e96 <HAL_UART_Init+0x5a>
{
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e46:	b30b      	cbz	r3, 8001e8c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e48:	2324      	movs	r3, #36	; 0x24
 8001e4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	68d3      	ldr	r3, [r2, #12]
 8001e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e56:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff fe25 	bl	8001aa8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	6913      	ldr	r3, [r2, #16]
 8001e62:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e66:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6953      	ldr	r3, [r2, #20]
 8001e6c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e70:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	68d3      	ldr	r3, [r2, #12]
 8001e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e7a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e80:	2320      	movs	r3, #32
 8001e82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001e8a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e8c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e90:	f000 fbb6 	bl	8002600 <HAL_UART_MspInit>
 8001e94:	e7d8      	b.n	8001e48 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
}
 8001e98:	4770      	bx	lr

08001e9a <HAL_UART_Transmit>:
{
 8001e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d155      	bne.n	8001f58 <HAL_UART_Transmit+0xbe>
 8001eac:	4604      	mov	r4, r0
 8001eae:	460d      	mov	r5, r1
 8001eb0:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8001eb2:	2900      	cmp	r1, #0
 8001eb4:	d054      	beq.n	8001f60 <HAL_UART_Transmit+0xc6>
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d054      	beq.n	8001f64 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001eba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d052      	beq.n	8001f68 <HAL_UART_Transmit+0xce>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ecc:	2321      	movs	r3, #33	; 0x21
 8001ece:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fbc1 	bl	8000658 <HAL_GetTick>
 8001ed6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001ed8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001edc:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001ee0:	e010      	b.n	8001f04 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee2:	9600      	str	r6, [sp, #0]
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff ff70 	bl	8001dd0 <UART_WaitOnFlagUntilTimeout>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d13b      	bne.n	8001f6c <HAL_UART_Transmit+0xd2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ef4:	882b      	ldrh	r3, [r5, #0]
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001efe:	6923      	ldr	r3, [r4, #16]
 8001f00:	b9cb      	cbnz	r3, 8001f36 <HAL_UART_Transmit+0x9c>
          pData +=2U;
 8001f02:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8001f04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b1bb      	cbz	r3, 8001f3a <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8001f0a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	b292      	uxth	r2, r2
 8001f12:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f14:	68a3      	ldr	r3, [r4, #8]
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d0e2      	beq.n	8001ee2 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1c:	9600      	str	r6, [sp, #0]
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	2180      	movs	r1, #128	; 0x80
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff ff53 	bl	8001dd0 <UART_WaitOnFlagUntilTimeout>
 8001f2a:	bb08      	cbnz	r0, 8001f70 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f2c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	e7e6      	b.n	8001f04 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8001f36:	3501      	adds	r5, #1
 8001f38:	e7e4      	b.n	8001f04 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f3a:	9600      	str	r6, [sp, #0]
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff ff44 	bl	8001dd0 <UART_WaitOnFlagUntilTimeout>
 8001f48:	b9a0      	cbnz	r0, 8001f74 <HAL_UART_Transmit+0xda>
      huart->gState = HAL_UART_STATE_READY;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001f50:	2300      	movs	r3, #0
 8001f52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001f56:	e000      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001f58:	2002      	movs	r0, #2
}
 8001f5a:	b002      	add	sp, #8
 8001f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001f60:	2001      	movs	r0, #1
 8001f62:	e7fa      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
 8001f64:	2001      	movs	r0, #1
 8001f66:	e7f8      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	e7f6      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	e7f4      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e7f2      	b.n	8001f5a <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001f74:	2003      	movs	r0, #3
 8001f76:	e7f0      	b.n	8001f5a <HAL_UART_Transmit+0xc0>

08001f78 <SysTick_Handler>:
extern TIM_HandleTypeDef htimer6;
extern void CAN1_Tx(uint8_t remote);


void SysTick_Handler (void)
{
 8001f78:	b508      	push	{r3, lr}
	HAL_IncTick();
 8001f7a:	f7fe fb61 	bl	8000640 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001f7e:	f7fe ffd0 	bl	8000f22 <HAL_SYSTICK_IRQHandler>
}
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <CAN1_TX_IRQHandler>:

//WHENEVER THE TRANSMIT RELATED EROR OCCURES THIS FUNCTION WILL GET CALLED AND IT WILL GO INSIDE THE IRQ HANDLER TXMAIL BOX0 COMPLETE CALL BACK
void CAN1_TX_IRQHandler(void)
{
 8001f84:	b508      	push	{r3, lr}
	HAL_CAN_IRQHandler(&hcan1); ////CALL THE INTERUPT PROCESSING API
 8001f86:	4802      	ldr	r0, [pc, #8]	; (8001f90 <CAN1_TX_IRQHandler+0xc>)
 8001f88:	f7fe fe2b 	bl	8000be2 <HAL_CAN_IRQHandler>
}
 8001f8c:	bd08      	pop	{r3, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000d4 	.word	0x200000d4

08001f94 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8001f94:	b508      	push	{r3, lr}
	HAL_CAN_IRQHandler(&hcan1);
 8001f96:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <CAN1_RX0_IRQHandler+0xc>)
 8001f98:	f7fe fe23 	bl	8000be2 <HAL_CAN_IRQHandler>

}
 8001f9c:	bd08      	pop	{r3, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000d4 	.word	0x200000d4

08001fa4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8001fa4:	b508      	push	{r3, lr}
	HAL_CAN_IRQHandler(&hcan1);
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <CAN1_SCE_IRQHandler+0xc>)
 8001fa8:	f7fe fe1b 	bl	8000be2 <HAL_CAN_IRQHandler>
}
 8001fac:	bd08      	pop	{r3, pc}
 8001fae:	bf00      	nop
 8001fb0:	200000d4 	.word	0x200000d4

08001fb4 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 8001fb4:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htimer6);
 8001fb6:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM6_DAC_IRQHandler+0xc>)
 8001fb8:	f7ff fc3c 	bl	8001834 <HAL_TIM_IRQHandler>

}
 8001fbc:	bd08      	pop	{r3, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200000fc 	.word	0x200000fc

08001fc4 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htimer6);
 8001fc6:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <EXTI15_10_IRQHandler+0x14>)
 8001fc8:	f7ff fc24 	bl	8001814 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fd0:	f7ff f898 	bl	8001104 <HAL_GPIO_EXTI_IRQHandler>

}
 8001fd4:	bd08      	pop	{r3, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000fc 	.word	0x200000fc

08001fdc <GPIO_Init>:

}


void GPIO_Init(void)
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	b088      	sub	sp, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	9400      	str	r4, [sp, #0]
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <GPIO_Init+0x9c>)
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	f002 0201 	and.w	r2, r2, #1
 8001ff4:	9200      	str	r2, [sp, #0]
 8001ff6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff8:	9401      	str	r4, [sp, #4]
 8001ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffc:	f042 0204 	orr.w	r2, r2, #4
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
 8002002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002004:	f002 0204 	and.w	r2, r2, #4
 8002008:	9201      	str	r2, [sp, #4]
 800200a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	9402      	str	r4, [sp, #8]
 800200e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002010:	f042 0202 	orr.w	r2, r2, #2
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	9b02      	ldr	r3, [sp, #8]


	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8002020:	2320      	movs	r3, #32
 8002022:	9303      	str	r3, [sp, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2501      	movs	r5, #1
 8002026:	9504      	str	r5, [sp, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8002028:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800202a:	a903      	add	r1, sp, #12
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <GPIO_Init+0xa0>)
 800202e:	f7fe ff7d 	bl	8000f2c <HAL_GPIO_Init>


	ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_6;
 8002032:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002036:	9303      	str	r3, [sp, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	9504      	str	r5, [sp, #16]
	ledgpio.Pull = GPIO_NOPULL;
 800203a:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOC,&ledgpio);
 800203c:	4e10      	ldr	r6, [pc, #64]	; (8002080 <GPIO_Init+0xa4>)
 800203e:	a903      	add	r1, sp, #12
 8002040:	4630      	mov	r0, r6
 8002042:	f7fe ff73 	bl	8000f2c <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 8002046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204a:	9303      	str	r3, [sp, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	9504      	str	r5, [sp, #16]
	ledgpio.Pull = GPIO_NOPULL;
 800204e:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB,&ledgpio);
 8002050:	a903      	add	r1, sp, #12
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <GPIO_Init+0xa8>)
 8002054:	f7fe ff6a 	bl	8000f2c <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_13;
 8002058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205c:	9303      	str	r3, [sp, #12]
	ledgpio.Mode = GPIO_MODE_IT_FALLING;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <GPIO_Init+0xac>)
 8002060:	9304      	str	r3, [sp, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8002062:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOC,&ledgpio);
 8002064:	a903      	add	r1, sp, #12
 8002066:	4630      	mov	r0, r6
 8002068:	f7fe ff60 	bl	8000f2c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800206c:	2028      	movs	r0, #40	; 0x28
 800206e:	f7fe ff27 	bl	8000ec0 <HAL_NVIC_EnableIRQ>


}
 8002072:	b008      	add	sp, #32
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020800 	.word	0x40020800
 8002084:	40020400 	.word	0x40020400
 8002088:	10210000 	.word	0x10210000

0800208c <HAL_CAN_TxMailbox0CompleteCallback>:

}


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b510      	push	{r4, lr}
 800208e:	b08e      	sub	sp, #56	; 0x38
	char msg[50];
	sprintf(msg,"Message Transmitted:M0\r\n");
 8002090:	f10d 0c04 	add.w	ip, sp, #4
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <HAL_CAN_TxMailbox0CompleteCallback+0x34>)
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800209c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80020a4:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80020a8:	a801      	add	r0, sp, #4
 80020aa:	f7fe f8b1 	bl	8000210 <strlen>
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	b282      	uxth	r2, r0
 80020b4:	a901      	add	r1, sp, #4
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80020b8:	f7ff feef 	bl	8001e9a <HAL_UART_Transmit>

}
 80020bc:	b00e      	add	sp, #56	; 0x38
 80020be:	bd10      	pop	{r4, pc}
 80020c0:	0800313c 	.word	0x0800313c
 80020c4:	20000090 	.word	0x20000090

080020c8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b510      	push	{r4, lr}
 80020ca:	b08e      	sub	sp, #56	; 0x38
	char msg[50];
	sprintf(msg,"Message Transmitted:M1\r\n");
 80020cc:	f10d 0c04 	add.w	ip, sp, #4
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <HAL_CAN_TxMailbox1CompleteCallback+0x34>)
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80020e0:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80020e4:	a801      	add	r0, sp, #4
 80020e6:	f7fe f893 	bl	8000210 <strlen>
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	b282      	uxth	r2, r0
 80020f0:	a901      	add	r1, sp, #4
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80020f4:	f7ff fed1 	bl	8001e9a <HAL_UART_Transmit>

}
 80020f8:	b00e      	add	sp, #56	; 0x38
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	08003158 	.word	0x08003158
 8002100:	20000090 	.word	0x20000090

08002104 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b510      	push	{r4, lr}
 8002106:	b08e      	sub	sp, #56	; 0x38
	char msg[50];
	sprintf(msg,"Message Transmitted:M2\r\n");
 8002108:	f10d 0c04 	add.w	ip, sp, #4
 800210c:	4c0a      	ldr	r4, [pc, #40]	; (8002138 <HAL_CAN_TxMailbox2CompleteCallback+0x34>)
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002114:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002118:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800211c:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002120:	a801      	add	r0, sp, #4
 8002122:	f7fe f875 	bl	8000210 <strlen>
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	b282      	uxth	r2, r0
 800212c:	a901      	add	r1, sp, #4
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8002130:	f7ff feb3 	bl	8001e9a <HAL_UART_Transmit>

}
 8002134:	b00e      	add	sp, #56	; 0x38
 8002136:	bd10      	pop	{r4, pc}
 8002138:	08003174 	.word	0x08003174
 800213c:	20000090 	.word	0x20000090

08002140 <LED_Manage_Output>:
	}

 }

 void LED_Manage_Output(uint8_t led_no)
 {
 8002140:	b510      	push	{r4, lr}
 	switch(led_no)
 8002142:	3801      	subs	r0, #1
 8002144:	2803      	cmp	r0, #3
 8002146:	d81b      	bhi.n	8002180 <LED_Manage_Output+0x40>
 8002148:	e8df f000 	tbb	[pc, r0]
 800214c:	4d341b02 	.word	0x4d341b02
 	{
 	case 1 :
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_SET);
 8002150:	4c31      	ldr	r4, [pc, #196]	; (8002218 <LED_Manage_Output+0xd8>)
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002158:	4620      	mov	r0, r4
 800215a:	f7fe ffc7 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002164:	4620      	mov	r0, r4
 8002166:	f7fe ffc1 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002170:	482a      	ldr	r0, [pc, #168]	; (800221c <LED_Manage_Output+0xdc>)
 8002172:	f7fe ffbb 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	4620      	mov	r0, r4
 800217c:	f7fe ffb6 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_SET);
 		break;
 	}
 }
 8002180:	bd10      	pop	{r4, pc}
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8002182:	4c25      	ldr	r4, [pc, #148]	; (8002218 <LED_Manage_Output+0xd8>)
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218a:	4620      	mov	r0, r4
 800218c:	f7fe ffae 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002196:	4620      	mov	r0, r4
 8002198:	f7fe ffa8 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a2:	481e      	ldr	r0, [pc, #120]	; (800221c <LED_Manage_Output+0xdc>)
 80021a4:	f7fe ffa2 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	; 0x40
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7fe ff9d 	bl	80010ec <HAL_GPIO_WritePin>
 		break;
 80021b2:	e7e5      	b.n	8002180 <LED_Manage_Output+0x40>
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 80021b4:	4c18      	ldr	r4, [pc, #96]	; (8002218 <LED_Manage_Output+0xd8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021bc:	4620      	mov	r0, r4
 80021be:	f7fe ff95 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe ff8f 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_SET);
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <LED_Manage_Output+0xdc>)
 80021d6:	f7fe ff89 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4620      	mov	r0, r4
 80021e0:	f7fe ff84 	bl	80010ec <HAL_GPIO_WritePin>
 		break;
 80021e4:	e7cc      	b.n	8002180 <LED_Manage_Output+0x40>
 		HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 80021e6:	4c0c      	ldr	r4, [pc, #48]	; (8002218 <LED_Manage_Output+0xd8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe ff7c 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7fe ff76 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <LED_Manage_Output+0xdc>)
 8002208:	f7fe ff70 	bl	80010ec <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	4620      	mov	r0, r4
 8002212:	f7fe ff6b 	bl	80010ec <HAL_GPIO_WritePin>
 }
 8002216:	e7b3      	b.n	8002180 <LED_Manage_Output+0x40>
 8002218:	40020800 	.word	0x40020800
 800221c:	40020400 	.word	0x40020400

08002220 <Error_handler>:
 }


void Error_handler(void)
{
	while(1);
 8002220:	e7fe      	b.n	8002220 <Error_handler>
	...

08002224 <SystemClock_Config_HSE>:
{
 8002224:	b510      	push	{r4, lr}
 8002226:	b092      	sub	sp, #72	; 0x48
	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8002228:	2301      	movs	r3, #1
 800222a:	9305      	str	r3, [sp, #20]
	Osc_Init.HSEState = RCC_HSE_ON;
 800222c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002230:	9306      	str	r3, [sp, #24]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8002232:	2302      	movs	r3, #2
 8002234:	930b      	str	r3, [sp, #44]	; 0x2c
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800223a:	930c      	str	r3, [sp, #48]	; 0x30
	switch(clock_freq)
 800223c:	2854      	cmp	r0, #84	; 0x54
 800223e:	d033      	beq.n	80022a8 <SystemClock_Config_HSE+0x84>
 8002240:	2878      	cmp	r0, #120	; 0x78
 8002242:	d043      	beq.n	80022cc <SystemClock_Config_HSE+0xa8>
 8002244:	2832      	cmp	r0, #50	; 0x32
 8002246:	d12d      	bne.n	80022a4 <SystemClock_Config_HSE+0x80>
		  Osc_Init.PLL.PLLM = 4;
 8002248:	2304      	movs	r3, #4
 800224a:	930d      	str	r3, [sp, #52]	; 0x34
		  Osc_Init.PLL.PLLN = 50;
 800224c:	2332      	movs	r3, #50	; 0x32
 800224e:	930e      	str	r3, [sp, #56]	; 0x38
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8002250:	2302      	movs	r3, #2
 8002252:	930f      	str	r3, [sp, #60]	; 0x3c
		  Osc_Init.PLL.PLLQ = 2;
 8002254:	9310      	str	r3, [sp, #64]	; 0x40
		  Osc_Init.PLL.PLLR = 2;
 8002256:	9311      	str	r3, [sp, #68]	; 0x44
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002258:	220f      	movs	r2, #15
 800225a:	9200      	str	r2, [sp, #0]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225c:	9301      	str	r3, [sp, #4]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	9302      	str	r3, [sp, #8]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002262:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002266:	9203      	str	r2, [sp, #12]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8002268:	9304      	str	r3, [sp, #16]
          flash_latency = 1;
 800226a:	2401      	movs	r4, #1
		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800226c:	a805      	add	r0, sp, #20
 800226e:	f7ff f8eb 	bl	8001448 <HAL_RCC_OscConfig>
 8002272:	2800      	cmp	r0, #0
 8002274:	d13f      	bne.n	80022f6 <SystemClock_Config_HSE+0xd2>
	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8002276:	4621      	mov	r1, r4
 8002278:	4668      	mov	r0, sp
 800227a:	f7fe ff51 	bl	8001120 <HAL_RCC_ClockConfig>
 800227e:	2800      	cmp	r0, #0
 8002280:	d13b      	bne.n	80022fa <SystemClock_Config_HSE+0xd6>
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8002282:	f7fe fffb 	bl	800127c <HAL_RCC_GetHCLKFreq>
	HAL_SYSTICK_Config(hclk_freq/1000);
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <SystemClock_Config_HSE+0xdc>)
 8002288:	fba3 3000 	umull	r3, r0, r3, r0
 800228c:	0980      	lsrs	r0, r0, #6
 800228e:	f7fe fe23 	bl	8000ed8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002292:	2004      	movs	r0, #4
 8002294:	f7fe fe34 	bl	8000f00 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	4611      	mov	r1, r2
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7fe fdd6 	bl	8000e50 <HAL_NVIC_SetPriority>
 }
 80022a4:	b012      	add	sp, #72	; 0x48
 80022a6:	bd10      	pop	{r4, pc}
		  Osc_Init.PLL.PLLM = 4;
 80022a8:	2304      	movs	r3, #4
 80022aa:	930d      	str	r3, [sp, #52]	; 0x34
		  Osc_Init.PLL.PLLN = 84;
 80022ac:	2354      	movs	r3, #84	; 0x54
 80022ae:	930e      	str	r3, [sp, #56]	; 0x38
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80022b0:	2402      	movs	r4, #2
 80022b2:	940f      	str	r4, [sp, #60]	; 0x3c
		  Osc_Init.PLL.PLLQ = 2;
 80022b4:	9410      	str	r4, [sp, #64]	; 0x40
		  Osc_Init.PLL.PLLR = 2;
 80022b6:	9411      	str	r4, [sp, #68]	; 0x44
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b8:	230f      	movs	r3, #15
 80022ba:	9300      	str	r3, [sp, #0]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022bc:	9401      	str	r4, [sp, #4]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	9302      	str	r3, [sp, #8]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022c6:	9203      	str	r2, [sp, #12]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c8:	9304      	str	r3, [sp, #16]
	     break;
 80022ca:	e7cf      	b.n	800226c <SystemClock_Config_HSE+0x48>
		  Osc_Init.PLL.PLLM = 4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	930d      	str	r3, [sp, #52]	; 0x34
		  Osc_Init.PLL.PLLN = 120;
 80022d0:	2378      	movs	r3, #120	; 0x78
 80022d2:	930e      	str	r3, [sp, #56]	; 0x38
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	930f      	str	r3, [sp, #60]	; 0x3c
		  Osc_Init.PLL.PLLQ = 2;
 80022d8:	9310      	str	r3, [sp, #64]	; 0x40
		  Osc_Init.PLL.PLLR = 2;
 80022da:	9311      	str	r3, [sp, #68]	; 0x44
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022dc:	220f      	movs	r2, #15
 80022de:	9200      	str	r2, [sp, #0]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	9301      	str	r3, [sp, #4]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	9302      	str	r3, [sp, #8]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ea:	9303      	str	r3, [sp, #12]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	9304      	str	r3, [sp, #16]
          flash_latency = 3;
 80022f2:	2403      	movs	r4, #3
	     break;
 80022f4:	e7ba      	b.n	800226c <SystemClock_Config_HSE+0x48>
			Error_handler();
 80022f6:	f7ff ff93 	bl	8002220 <Error_handler>
		Error_handler();
 80022fa:	f7ff ff91 	bl	8002220 <Error_handler>
 80022fe:	bf00      	nop
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <CAN1_Tx>:
{
 8002304:	b500      	push	{lr}
 8002306:	b089      	sub	sp, #36	; 0x24
	TxHeader.DLC = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	9306      	str	r3, [sp, #24]
	TxHeader.StdId = 0x65D;
 800230c:	f240 635d 	movw	r3, #1629	; 0x65d
 8002310:	9302      	str	r3, [sp, #8]
	TxHeader.IDE   = CAN_ID_STD;
 8002312:	2300      	movs	r3, #0
 8002314:	9304      	str	r3, [sp, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8002316:	9305      	str	r3, [sp, #20]
	message = ++led_no;
 8002318:	4a10      	ldr	r2, [pc, #64]	; (800235c <CAN1_Tx+0x58>)
 800231a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800231e:	3301      	adds	r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 8002326:	f88d 3003 	strb.w	r3, [sp, #3]
	if(led_no == 4)
 800232a:	2b04      	cmp	r3, #4
 800232c:	d00e      	beq.n	800234c <CAN1_Tx+0x48>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800232e:	2120      	movs	r1, #32
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <CAN1_Tx+0x5c>)
 8002332:	f7fe fee1 	bl	80010f8 <HAL_GPIO_TogglePin>
	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8002336:	ab01      	add	r3, sp, #4
 8002338:	f10d 0203 	add.w	r2, sp, #3
 800233c:	a902      	add	r1, sp, #8
 800233e:	4809      	ldr	r0, [pc, #36]	; (8002364 <CAN1_Tx+0x60>)
 8002340:	f7fe fb02 	bl	8000948 <HAL_CAN_AddTxMessage>
 8002344:	b938      	cbnz	r0, 8002356 <CAN1_Tx+0x52>
}
 8002346:	b009      	add	sp, #36	; 0x24
 8002348:	f85d fb04 	ldr.w	pc, [sp], #4
	    led_no = 0;
 800234c:	4613      	mov	r3, r2
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	e7eb      	b.n	800232e <CAN1_Tx+0x2a>
		Error_handler();
 8002356:	f7ff ff63 	bl	8002220 <Error_handler>
 800235a:	bf00      	nop
 800235c:	20000090 	.word	0x20000090
 8002360:	40020000 	.word	0x40020000
 8002364:	200000d4 	.word	0x200000d4

08002368 <CAN_Filter_Config>:
{
 8002368:	b500      	push	{lr}
 800236a:	b08b      	sub	sp, #44	; 0x2c
	can1_filter_init.FilterActivation = ENABLE;
 800236c:	2201      	movs	r2, #1
 800236e:	9208      	str	r2, [sp, #32]
	can1_filter_init.FilterBank  = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	9305      	str	r3, [sp, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002374:	9304      	str	r3, [sp, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8002376:	9300      	str	r3, [sp, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8002378:	9301      	str	r3, [sp, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;//0X01C0;
 800237a:	9302      	str	r3, [sp, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800237c:	9303      	str	r3, [sp, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800237e:	9306      	str	r3, [sp, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8002380:	9207      	str	r2, [sp, #28]
	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8002382:	4669      	mov	r1, sp
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <CAN_Filter_Config+0x30>)
 8002386:	f7fe fa13 	bl	80007b0 <HAL_CAN_ConfigFilter>
 800238a:	b910      	cbnz	r0, 8002392 <CAN_Filter_Config+0x2a>
}
 800238c:	b00b      	add	sp, #44	; 0x2c
 800238e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_handler();
 8002392:	f7ff ff45 	bl	8002220 <Error_handler>
 8002396:	bf00      	nop
 8002398:	200000d4 	.word	0x200000d4

0800239c <TIMER6_Init>:
{
 800239c:	b508      	push	{r3, lr}
	htimer6.Instance = TIM6;
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <TIMER6_Init+0x24>)
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <TIMER6_Init+0x28>)
 80023a2:	66c3      	str	r3, [r0, #108]	; 0x6c
	htimer6.Init.Prescaler = 4999;
 80023a4:	f241 3387 	movw	r3, #4999	; 0x1387
 80023a8:	6703      	str	r3, [r0, #112]	; 0x70
	htimer6.Init.Period = 10000-1;
 80023aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80023ae:	6783      	str	r3, [r0, #120]	; 0x78
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80023b0:	306c      	adds	r0, #108	; 0x6c
 80023b2:	f7ff fb5d 	bl	8001a70 <HAL_TIM_Base_Init>
 80023b6:	b900      	cbnz	r0, 80023ba <TIMER6_Init+0x1e>
}
 80023b8:	bd08      	pop	{r3, pc}
		Error_handler();
 80023ba:	f7ff ff31 	bl	8002220 <Error_handler>
 80023be:	bf00      	nop
 80023c0:	20000090 	.word	0x20000090
 80023c4:	40001000 	.word	0x40001000

080023c8 <UART2_Init>:
{
 80023c8:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 80023ca:	4809      	ldr	r0, [pc, #36]	; (80023f0 <UART2_Init+0x28>)
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <UART2_Init+0x2c>)
 80023ce:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80023d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80023d4:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	2300      	movs	r3, #0
 80023d8:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80023da:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80023dc:	6103      	str	r3, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	6183      	str	r3, [r0, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	230c      	movs	r3, #12
 80023e2:	6143      	str	r3, [r0, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80023e4:	f7ff fd2a 	bl	8001e3c <HAL_UART_Init>
 80023e8:	b900      	cbnz	r0, 80023ec <UART2_Init+0x24>
}
 80023ea:	bd08      	pop	{r3, pc}
		Error_handler();
 80023ec:	f7ff ff18 	bl	8002220 <Error_handler>
 80023f0:	20000090 	.word	0x20000090
 80023f4:	40004400 	.word	0x40004400

080023f8 <CAN1_Init>:
{
 80023f8:	b508      	push	{r3, lr}
	hcan1.Instance = CAN1;
 80023fa:	4810      	ldr	r0, [pc, #64]	; (800243c <CAN1_Init+0x44>)
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <CAN1_Init+0x48>)
 80023fe:	6443      	str	r3, [r0, #68]	; 0x44
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002400:	2300      	movs	r3, #0
 8002402:	64c3      	str	r3, [r0, #76]	; 0x4c
	hcan1.Init.AutoBusOff = ENABLE;
 8002404:	2201      	movs	r2, #1
 8002406:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
	hcan1.Init.AutoRetransmission = ENABLE;
 800240a:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
	hcan1.Init.AutoWakeUp = DISABLE;
 800240e:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002412:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8002416:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800241a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
	hcan1.Init.Prescaler = 5; //3
 800241e:	2205      	movs	r2, #5
 8002420:	6482      	str	r2, [r0, #72]	; 0x48
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002422:	6503      	str	r3, [r0, #80]	; 0x50
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;//CAN_BS1_1TQ
 8002424:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002428:	6542      	str	r2, [r0, #84]	; 0x54
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;//CAN_BS2_2TQ
 800242a:	6583      	str	r3, [r0, #88]	; 0x58
	if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 800242c:	3044      	adds	r0, #68	; 0x44
 800242e:	f7fe f919 	bl	8000664 <HAL_CAN_Init>
 8002432:	b900      	cbnz	r0, 8002436 <CAN1_Init+0x3e>
}
 8002434:	bd08      	pop	{r3, pc}
		Error_handler();
 8002436:	f7ff fef3 	bl	8002220 <Error_handler>
 800243a:	bf00      	nop
 800243c:	20000090 	.word	0x20000090
 8002440:	40006400 	.word	0x40006400

08002444 <main>:
{
 8002444:	b508      	push	{r3, lr}
	HAL_Init();
 8002446:	f7fe f8e1 	bl	800060c <HAL_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);//SYS_CLOCK_FREQ_84_MHZ
 800244a:	2032      	movs	r0, #50	; 0x32
 800244c:	f7ff feea 	bl	8002224 <SystemClock_Config_HSE>
	GPIO_Init();
 8002450:	f7ff fdc4 	bl	8001fdc <GPIO_Init>
	UART2_Init();
 8002454:	f7ff ffb8 	bl	80023c8 <UART2_Init>
	TIMER6_Init();
 8002458:	f7ff ffa0 	bl	800239c <TIMER6_Init>
	CAN1_Init();
 800245c:	f7ff ffcc 	bl	80023f8 <CAN1_Init>
	CAN_Filter_Config();
 8002460:	f7ff ff82 	bl	8002368 <CAN_Filter_Config>
	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8002464:	f240 4103 	movw	r1, #1027	; 0x403
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <main+0x40>)
 800246a:	f7fe fb9b 	bl	8000ba4 <HAL_CAN_ActivateNotification>
 800246e:	b108      	cbz	r0, 8002474 <main+0x30>
			Error_handler();
 8002470:	f7ff fed6 	bl	8002220 <Error_handler>
	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <main+0x40>)
 8002476:	f7fe fa39 	bl	80008ec <HAL_CAN_Start>
 800247a:	b900      	cbnz	r0, 800247e <main+0x3a>
	while(1);
 800247c:	e7fe      	b.n	800247c <main+0x38>
		Error_handler();
 800247e:	f7ff fecf 	bl	8002220 <Error_handler>
 8002482:	bf00      	nop
 8002484:	200000d4 	.word	0x200000d4

08002488 <HAL_TIM_PeriodElapsedCallback>:
 {
 8002488:	b500      	push	{lr}
 800248a:	b089      	sub	sp, #36	; 0x24
	if ( req_counter  == 4)
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800248e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8002492:	2b04      	cmp	r3, #4
 8002494:	d00a      	beq.n	80024ac <HAL_TIM_PeriodElapsedCallback+0x24>
		CAN1_Tx();
 8002496:	f7ff ff35 	bl	8002304 <CAN1_Tx>
		req_counter++;
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800249c:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8
 80024a0:	3301      	adds	r3, #1
 80024a2:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
 }
 80024a6:	b009      	add	sp, #36	; 0x24
 80024a8:	f85d fb04 	ldr.w	pc, [sp], #4
		TxHeader.DLC = 2; //N1 demanding 2 bytes of reply
 80024ac:	2302      	movs	r3, #2
 80024ae:	9306      	str	r3, [sp, #24]
		TxHeader.StdId = 0x651;
 80024b0:	f240 6251 	movw	r2, #1617	; 0x651
 80024b4:	9202      	str	r2, [sp, #8]
		TxHeader.IDE   = CAN_ID_STD;
 80024b6:	2200      	movs	r2, #0
 80024b8:	9204      	str	r2, [sp, #16]
		TxHeader.RTR = CAN_RTR_REMOTE;
 80024ba:	9305      	str	r3, [sp, #20]
		if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 80024bc:	ab01      	add	r3, sp, #4
 80024be:	f10d 0203 	add.w	r2, sp, #3
 80024c2:	a902      	add	r1, sp, #8
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024c6:	f7fe fa3f 	bl	8000948 <HAL_CAN_AddTxMessage>
 80024ca:	b920      	cbnz	r0, 80024d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		req_counter = 0;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80024d4:	e7e7      	b.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
			Error_handler();
 80024d6:	f7ff fea3 	bl	8002220 <Error_handler>
 80024da:	bf00      	nop
 80024dc:	20000090 	.word	0x20000090
 80024e0:	200000d4 	.word	0x200000d4

080024e4 <Send_response>:
 {
 80024e4:	b500      	push	{lr}
 80024e6:	b089      	sub	sp, #36	; 0x24
 	uint8_t response[2] = { 0xAB,0XCD};
 80024e8:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 80024ec:	f8ad 3000 	strh.w	r3, [sp]
 	TxHeader.DLC = 2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	9306      	str	r3, [sp, #24]
 	TxHeader.StdId = StdId;
 80024f4:	9002      	str	r0, [sp, #8]
 	TxHeader.IDE   = CAN_ID_STD;
 80024f6:	2300      	movs	r3, #0
 80024f8:	9304      	str	r3, [sp, #16]
 	TxHeader.RTR = CAN_RTR_DATA;
 80024fa:	9305      	str	r3, [sp, #20]
 	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,response,&TxMailbox) != HAL_OK)
 80024fc:	ab01      	add	r3, sp, #4
 80024fe:	466a      	mov	r2, sp
 8002500:	a902      	add	r1, sp, #8
 8002502:	4804      	ldr	r0, [pc, #16]	; (8002514 <Send_response+0x30>)
 8002504:	f7fe fa20 	bl	8000948 <HAL_CAN_AddTxMessage>
 8002508:	b910      	cbnz	r0, 8002510 <Send_response+0x2c>
 }
 800250a:	b009      	add	sp, #36	; 0x24
 800250c:	f85d fb04 	ldr.w	pc, [sp], #4
 		Error_handler();
 8002510:	f7ff fe86 	bl	8002220 <Error_handler>
 8002514:	200000d4 	.word	0x200000d4

08002518 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8002518:	b500      	push	{lr}
 800251a:	b091      	sub	sp, #68	; 0x44
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 800251c:	ab0e      	add	r3, sp, #56	; 0x38
 800251e:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8002520:	2100      	movs	r1, #0
 8002522:	f7fe fa95 	bl	8000a50 <HAL_CAN_GetRxMessage>
 8002526:	b9d8      	cbnz	r0, 8002560 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0 )
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 800252a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800252e:	f240 635d 	movw	r3, #1629	; 0x65d
 8002532:	4298      	cmp	r0, r3
 8002534:	d016      	beq.n	8002564 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8002536:	f240 6351 	movw	r3, #1617	; 0x651
 800253a:	4298      	cmp	r0, r3
 800253c:	d022      	beq.n	8002584 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 800253e:	f240 6351 	movw	r3, #1617	; 0x651
 8002542:	4298      	cmp	r0, r3
 8002544:	d026      	beq.n	8002594 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
	 HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002546:	a801      	add	r0, sp, #4
 8002548:	f7fd fe62 	bl	8000210 <strlen>
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	b282      	uxth	r2, r0
 8002552:	a901      	add	r1, sp, #4
 8002554:	4818      	ldr	r0, [pc, #96]	; (80025b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8002556:	f7ff fca0 	bl	8001e9a <HAL_UART_Transmit>
}
 800255a:	b011      	add	sp, #68	; 0x44
 800255c:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_handler();
 8002560:	f7ff fe5e 	bl	8002220 <Error_handler>
	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0 )
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8002566:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e3      	bne.n	8002536 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		LED_Manage_Output(rcvd_msg[0]);
 800256e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8002572:	f7ff fde5 	bl	8002140 <LED_Manage_Output>
		sprintf(msg,"Message Received : #%x\r\n",rcvd_msg[0]);
 8002576:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800257a:	4910      	ldr	r1, [pc, #64]	; (80025bc <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800257c:	a801      	add	r0, sp, #4
 800257e:	f000 f949 	bl	8002814 <siprintf>
 8002582:	e7e0      	b.n	8002546 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8002586:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800258a:	2b01      	cmp	r3, #1
 800258c:	d1d7      	bne.n	800253e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		Send_response(RxHeader.StdId);
 800258e:	f7ff ffa9 	bl	80024e4 <Send_response>
		return;
 8002592:	e7e2      	b.n	800255a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	else if ( RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8002596:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1d3      	bne.n	8002546 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
 800259e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80025a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80025a6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80025aa:	4905      	ldr	r1, [pc, #20]	; (80025c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80025ac:	a801      	add	r0, sp, #4
 80025ae:	f000 f931 	bl	8002814 <siprintf>
 80025b2:	e7c8      	b.n	8002546 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 80025b4:	2000013c 	.word	0x2000013c
 80025b8:	20000090 	.word	0x20000090
 80025bc:	08003190 	.word	0x08003190
 80025c0:	080031ac 	.word	0x080031ac

080025c4 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 80025c4:	b508      	push	{r3, lr}
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f7fe fc30 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_MspInit+0x38>)
 80025ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80025d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80025d4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	4611      	mov	r1, r2
 80025da:	f06f 000b 	mvn.w	r0, #11
 80025de:	f7fe fc37 	bl	8000e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	4611      	mov	r1, r2
 80025e6:	f06f 000a 	mvn.w	r0, #10
 80025ea:	f7fe fc31 	bl	8000e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	4611      	mov	r1, r2
 80025f2:	f06f 0009 	mvn.w	r0, #9
 80025f6:	f7fe fc2b 	bl	8000e50 <HAL_NVIC_SetPriority>
}
 80025fa:	bd08      	pop	{r3, pc}
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002600:	b530      	push	{r4, r5, lr}
 8002602:	b089      	sub	sp, #36	; 0x24
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8002604:	2400      	movs	r4, #0
 8002606:	9401      	str	r4, [sp, #4]
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_UART_MspInit+0x6c>)
 800260a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
 8002612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002614:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002618:	9201      	str	r2, [sp, #4]
 800261a:	9a01      	ldr	r2, [sp, #4]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	9402      	str	r4, [sp, #8]
 800261e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	9302      	str	r3, [sp, #8]
 800262e:	9b02      	ldr	r3, [sp, #8]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8002630:	2304      	movs	r3, #4
 8002632:	9303      	str	r3, [sp, #12]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	9304      	str	r3, [sp, #16]
	 gpio_uart.Pull = GPIO_PULLUP;
 8002638:	2301      	movs	r3, #1
 800263a:	9305      	str	r3, [sp, #20]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	9406      	str	r4, [sp, #24]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 800263e:	2307      	movs	r3, #7
 8002640:	9307      	str	r3, [sp, #28]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8002642:	4d0b      	ldr	r5, [pc, #44]	; (8002670 <HAL_UART_MspInit+0x70>)
 8002644:	a903      	add	r1, sp, #12
 8002646:	4628      	mov	r0, r5
 8002648:	f7fe fc70 	bl	8000f2c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800264c:	2308      	movs	r3, #8
 800264e:	9303      	str	r3, [sp, #12]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8002650:	a903      	add	r1, sp, #12
 8002652:	4628      	mov	r0, r5
 8002654:	f7fe fc6a 	bl	8000f2c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002658:	2026      	movs	r0, #38	; 0x26
 800265a:	f7fe fc31 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800265e:	4622      	mov	r2, r4
 8002660:	210f      	movs	r1, #15
 8002662:	2026      	movs	r0, #38	; 0x26
 8002664:	f7fe fbf4 	bl	8000e50 <HAL_NVIC_SetPriority>

}
 8002668:	b009      	add	sp, #36	; 0x24
 800266a:	bd30      	pop	{r4, r5, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000

08002674 <HAL_CAN_MspInit>:


  void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 {
 8002674:	b510      	push	{r4, lr}
 8002676:	b086      	sub	sp, #24
	  GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_CAN1_CLK_ENABLE();
 8002678:	2400      	movs	r4, #0
 800267a:	9400      	str	r4, [sp, #0]
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_CAN_MspInit+0x7c>)
 800267e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002680:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	9b00      	ldr	r3, [sp, #0]

	/**CAN1 GPIO Configuration
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002690:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002694:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026a0:	2309      	movs	r3, #9
 80026a2:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	a901      	add	r1, sp, #4
 80026a6:	4813      	ldr	r0, [pc, #76]	; (80026f4 <HAL_CAN_MspInit+0x80>)
 80026a8:	f7fe fc40 	bl	8000f2c <HAL_GPIO_Init>

	//SETTING PRIORITY AND ENABLE THE IRQ FOR CAN

	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 80026ac:	4622      	mov	r2, r4
 80026ae:	210f      	movs	r1, #15
 80026b0:	2013      	movs	r0, #19
 80026b2:	f7fe fbcd 	bl	8000e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 80026b6:	4622      	mov	r2, r4
 80026b8:	210f      	movs	r1, #15
 80026ba:	2014      	movs	r0, #20
 80026bc:	f7fe fbc8 	bl	8000e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 80026c0:	4622      	mov	r2, r4
 80026c2:	210f      	movs	r1, #15
 80026c4:	2015      	movs	r0, #21
 80026c6:	f7fe fbc3 	bl	8000e50 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 80026ca:	4622      	mov	r2, r4
 80026cc:	210f      	movs	r1, #15
 80026ce:	2016      	movs	r0, #22
 80026d0:	f7fe fbbe 	bl	8000e50 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80026d4:	2013      	movs	r0, #19
 80026d6:	f7fe fbf3 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026da:	2014      	movs	r0, #20
 80026dc:	f7fe fbf0 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80026e0:	2015      	movs	r0, #21
 80026e2:	f7fe fbed 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80026e6:	2016      	movs	r0, #22
 80026e8:	f7fe fbea 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

 }
 80026ec:	b006      	add	sp, #24
 80026ee:	bd10      	pop	{r4, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <HAL_TIM_Base_MspInit>:


  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
  {
 80026f8:	b510      	push	{r4, lr}
 80026fa:	b082      	sub	sp, #8

  	//1. enable the clock for the TIM6 peripheral
  	__HAL_RCC_TIM6_CLK_ENABLE();
 80026fc:	2400      	movs	r4, #0
 80026fe:	9401      	str	r4, [sp, #4]
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_TIM_Base_MspInit+0x30>)
 8002702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002704:	f042 0210 	orr.w	r2, r2, #16
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	9b01      	ldr	r3, [sp, #4]

  	//2. Enable the IRQ of TIM6
  	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002714:	2036      	movs	r0, #54	; 0x36
 8002716:	f7fe fbd3 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

  	//3. setup the priority for TIM6_DAC_IRQn
  	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 800271a:	4622      	mov	r2, r4
 800271c:	210f      	movs	r1, #15
 800271e:	2036      	movs	r0, #54	; 0x36
 8002720:	f7fe fb96 	bl	8000e50 <HAL_NVIC_SetPriority>

  }
 8002724:	b002      	add	sp, #8
 8002726:	bd10      	pop	{r4, pc}
 8002728:	40023800 	.word	0x40023800

0800272c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800272c:	490f      	ldr	r1, [pc, #60]	; (800276c <SystemInit+0x40>)
 800272e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002732:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <SystemInit+0x44>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002744:	2000      	movs	r0, #0
 8002746:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800274e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002752:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <SystemInit+0x48>)
 8002756:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800275e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002760:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002766:	608b      	str	r3, [r1, #8]
#endif
}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	40023800 	.word	0x40023800
 8002774:	24003010 	.word	0x24003010

08002778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800277c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800277e:	e003      	b.n	8002788 <LoopCopyDataInit>

08002780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002786:	3104      	adds	r1, #4

08002788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800278c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800278e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002790:	d3f6      	bcc.n	8002780 <CopyDataInit>
  ldr  r2, =_sbss
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002794:	e002      	b.n	800279c <LoopFillZerobss>

08002796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002798:	f842 3b04 	str.w	r3, [r2], #4

0800279c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027a0:	d3f9      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027a2:	f7ff ffc3 	bl	800272c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a6:	f000 f811 	bl	80027cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027aa:	f7ff fe4b 	bl	8002444 <main>
  bx  lr    
 80027ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027b4:	08003208 	.word	0x08003208
  ldr  r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80027c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80027c4:	2000016c 	.word	0x2000016c

080027c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC_IRQHandler>
	...

080027cc <__libc_init_array>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	4d0d      	ldr	r5, [pc, #52]	; (8002804 <__libc_init_array+0x38>)
 80027d0:	4c0d      	ldr	r4, [pc, #52]	; (8002808 <__libc_init_array+0x3c>)
 80027d2:	1b64      	subs	r4, r4, r5
 80027d4:	10a4      	asrs	r4, r4, #2
 80027d6:	2600      	movs	r6, #0
 80027d8:	42a6      	cmp	r6, r4
 80027da:	d109      	bne.n	80027f0 <__libc_init_array+0x24>
 80027dc:	4d0b      	ldr	r5, [pc, #44]	; (800280c <__libc_init_array+0x40>)
 80027de:	4c0c      	ldr	r4, [pc, #48]	; (8002810 <__libc_init_array+0x44>)
 80027e0:	f000 fc94 	bl	800310c <_init>
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	2600      	movs	r6, #0
 80027ea:	42a6      	cmp	r6, r4
 80027ec:	d105      	bne.n	80027fa <__libc_init_array+0x2e>
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
 80027f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f4:	4798      	blx	r3
 80027f6:	3601      	adds	r6, #1
 80027f8:	e7ee      	b.n	80027d8 <__libc_init_array+0xc>
 80027fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fe:	4798      	blx	r3
 8002800:	3601      	adds	r6, #1
 8002802:	e7f2      	b.n	80027ea <__libc_init_array+0x1e>
 8002804:	08003200 	.word	0x08003200
 8002808:	08003200 	.word	0x08003200
 800280c:	08003200 	.word	0x08003200
 8002810:	08003204 	.word	0x08003204

08002814 <siprintf>:
 8002814:	b40e      	push	{r1, r2, r3}
 8002816:	b500      	push	{lr}
 8002818:	b09c      	sub	sp, #112	; 0x70
 800281a:	ab1d      	add	r3, sp, #116	; 0x74
 800281c:	9002      	str	r0, [sp, #8]
 800281e:	9006      	str	r0, [sp, #24]
 8002820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002824:	4809      	ldr	r0, [pc, #36]	; (800284c <siprintf+0x38>)
 8002826:	9107      	str	r1, [sp, #28]
 8002828:	9104      	str	r1, [sp, #16]
 800282a:	4909      	ldr	r1, [pc, #36]	; (8002850 <siprintf+0x3c>)
 800282c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002830:	9105      	str	r1, [sp, #20]
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	a902      	add	r1, sp, #8
 8002838:	f000 f868 	bl	800290c <_svfiprintf_r>
 800283c:	9b02      	ldr	r3, [sp, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	b01c      	add	sp, #112	; 0x70
 8002844:	f85d eb04 	ldr.w	lr, [sp], #4
 8002848:	b003      	add	sp, #12
 800284a:	4770      	bx	lr
 800284c:	2000000c 	.word	0x2000000c
 8002850:	ffff0208 	.word	0xffff0208

08002854 <__ssputs_r>:
 8002854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002858:	688e      	ldr	r6, [r1, #8]
 800285a:	429e      	cmp	r6, r3
 800285c:	4682      	mov	sl, r0
 800285e:	460c      	mov	r4, r1
 8002860:	4690      	mov	r8, r2
 8002862:	461f      	mov	r7, r3
 8002864:	d838      	bhi.n	80028d8 <__ssputs_r+0x84>
 8002866:	898a      	ldrh	r2, [r1, #12]
 8002868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800286c:	d032      	beq.n	80028d4 <__ssputs_r+0x80>
 800286e:	6825      	ldr	r5, [r4, #0]
 8002870:	6909      	ldr	r1, [r1, #16]
 8002872:	eba5 0901 	sub.w	r9, r5, r1
 8002876:	6965      	ldr	r5, [r4, #20]
 8002878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800287c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002880:	3301      	adds	r3, #1
 8002882:	444b      	add	r3, r9
 8002884:	106d      	asrs	r5, r5, #1
 8002886:	429d      	cmp	r5, r3
 8002888:	bf38      	it	cc
 800288a:	461d      	movcc	r5, r3
 800288c:	0553      	lsls	r3, r2, #21
 800288e:	d531      	bpl.n	80028f4 <__ssputs_r+0xa0>
 8002890:	4629      	mov	r1, r5
 8002892:	f000 fb63 	bl	8002f5c <_malloc_r>
 8002896:	4606      	mov	r6, r0
 8002898:	b950      	cbnz	r0, 80028b0 <__ssputs_r+0x5c>
 800289a:	230c      	movs	r3, #12
 800289c:	f8ca 3000 	str.w	r3, [sl]
 80028a0:	89a3      	ldrh	r3, [r4, #12]
 80028a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b0:	6921      	ldr	r1, [r4, #16]
 80028b2:	464a      	mov	r2, r9
 80028b4:	f000 fabe 	bl	8002e34 <memcpy>
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	6126      	str	r6, [r4, #16]
 80028c6:	6165      	str	r5, [r4, #20]
 80028c8:	444e      	add	r6, r9
 80028ca:	eba5 0509 	sub.w	r5, r5, r9
 80028ce:	6026      	str	r6, [r4, #0]
 80028d0:	60a5      	str	r5, [r4, #8]
 80028d2:	463e      	mov	r6, r7
 80028d4:	42be      	cmp	r6, r7
 80028d6:	d900      	bls.n	80028da <__ssputs_r+0x86>
 80028d8:	463e      	mov	r6, r7
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	4632      	mov	r2, r6
 80028de:	4641      	mov	r1, r8
 80028e0:	f000 fab6 	bl	8002e50 <memmove>
 80028e4:	68a3      	ldr	r3, [r4, #8]
 80028e6:	1b9b      	subs	r3, r3, r6
 80028e8:	60a3      	str	r3, [r4, #8]
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	4433      	add	r3, r6
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	2000      	movs	r0, #0
 80028f2:	e7db      	b.n	80028ac <__ssputs_r+0x58>
 80028f4:	462a      	mov	r2, r5
 80028f6:	f000 fba5 	bl	8003044 <_realloc_r>
 80028fa:	4606      	mov	r6, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d1e1      	bne.n	80028c4 <__ssputs_r+0x70>
 8002900:	6921      	ldr	r1, [r4, #16]
 8002902:	4650      	mov	r0, sl
 8002904:	f000 fabe 	bl	8002e84 <_free_r>
 8002908:	e7c7      	b.n	800289a <__ssputs_r+0x46>
	...

0800290c <_svfiprintf_r>:
 800290c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002910:	4698      	mov	r8, r3
 8002912:	898b      	ldrh	r3, [r1, #12]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	b09d      	sub	sp, #116	; 0x74
 8002918:	4607      	mov	r7, r0
 800291a:	460d      	mov	r5, r1
 800291c:	4614      	mov	r4, r2
 800291e:	d50e      	bpl.n	800293e <_svfiprintf_r+0x32>
 8002920:	690b      	ldr	r3, [r1, #16]
 8002922:	b963      	cbnz	r3, 800293e <_svfiprintf_r+0x32>
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	f000 fb19 	bl	8002f5c <_malloc_r>
 800292a:	6028      	str	r0, [r5, #0]
 800292c:	6128      	str	r0, [r5, #16]
 800292e:	b920      	cbnz	r0, 800293a <_svfiprintf_r+0x2e>
 8002930:	230c      	movs	r3, #12
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	e0d1      	b.n	8002ade <_svfiprintf_r+0x1d2>
 800293a:	2340      	movs	r3, #64	; 0x40
 800293c:	616b      	str	r3, [r5, #20]
 800293e:	2300      	movs	r3, #0
 8002940:	9309      	str	r3, [sp, #36]	; 0x24
 8002942:	2320      	movs	r3, #32
 8002944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002948:	f8cd 800c 	str.w	r8, [sp, #12]
 800294c:	2330      	movs	r3, #48	; 0x30
 800294e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002af8 <_svfiprintf_r+0x1ec>
 8002952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002956:	f04f 0901 	mov.w	r9, #1
 800295a:	4623      	mov	r3, r4
 800295c:	469a      	mov	sl, r3
 800295e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002962:	b10a      	cbz	r2, 8002968 <_svfiprintf_r+0x5c>
 8002964:	2a25      	cmp	r2, #37	; 0x25
 8002966:	d1f9      	bne.n	800295c <_svfiprintf_r+0x50>
 8002968:	ebba 0b04 	subs.w	fp, sl, r4
 800296c:	d00b      	beq.n	8002986 <_svfiprintf_r+0x7a>
 800296e:	465b      	mov	r3, fp
 8002970:	4622      	mov	r2, r4
 8002972:	4629      	mov	r1, r5
 8002974:	4638      	mov	r0, r7
 8002976:	f7ff ff6d 	bl	8002854 <__ssputs_r>
 800297a:	3001      	adds	r0, #1
 800297c:	f000 80aa 	beq.w	8002ad4 <_svfiprintf_r+0x1c8>
 8002980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002982:	445a      	add	r2, fp
 8002984:	9209      	str	r2, [sp, #36]	; 0x24
 8002986:	f89a 3000 	ldrb.w	r3, [sl]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a2 	beq.w	8002ad4 <_svfiprintf_r+0x1c8>
 8002990:	2300      	movs	r3, #0
 8002992:	f04f 32ff 	mov.w	r2, #4294967295
 8002996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800299a:	f10a 0a01 	add.w	sl, sl, #1
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	9307      	str	r3, [sp, #28]
 80029a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029a6:	931a      	str	r3, [sp, #104]	; 0x68
 80029a8:	4654      	mov	r4, sl
 80029aa:	2205      	movs	r2, #5
 80029ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b0:	4851      	ldr	r0, [pc, #324]	; (8002af8 <_svfiprintf_r+0x1ec>)
 80029b2:	f7fd fc35 	bl	8000220 <memchr>
 80029b6:	9a04      	ldr	r2, [sp, #16]
 80029b8:	b9d8      	cbnz	r0, 80029f2 <_svfiprintf_r+0xe6>
 80029ba:	06d0      	lsls	r0, r2, #27
 80029bc:	bf44      	itt	mi
 80029be:	2320      	movmi	r3, #32
 80029c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029c4:	0711      	lsls	r1, r2, #28
 80029c6:	bf44      	itt	mi
 80029c8:	232b      	movmi	r3, #43	; 0x2b
 80029ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ce:	f89a 3000 	ldrb.w	r3, [sl]
 80029d2:	2b2a      	cmp	r3, #42	; 0x2a
 80029d4:	d015      	beq.n	8002a02 <_svfiprintf_r+0xf6>
 80029d6:	9a07      	ldr	r2, [sp, #28]
 80029d8:	4654      	mov	r4, sl
 80029da:	2000      	movs	r0, #0
 80029dc:	f04f 0c0a 	mov.w	ip, #10
 80029e0:	4621      	mov	r1, r4
 80029e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029e6:	3b30      	subs	r3, #48	; 0x30
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d94e      	bls.n	8002a8a <_svfiprintf_r+0x17e>
 80029ec:	b1b0      	cbz	r0, 8002a1c <_svfiprintf_r+0x110>
 80029ee:	9207      	str	r2, [sp, #28]
 80029f0:	e014      	b.n	8002a1c <_svfiprintf_r+0x110>
 80029f2:	eba0 0308 	sub.w	r3, r0, r8
 80029f6:	fa09 f303 	lsl.w	r3, r9, r3
 80029fa:	4313      	orrs	r3, r2
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	46a2      	mov	sl, r4
 8002a00:	e7d2      	b.n	80029a8 <_svfiprintf_r+0x9c>
 8002a02:	9b03      	ldr	r3, [sp, #12]
 8002a04:	1d19      	adds	r1, r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	9103      	str	r1, [sp, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bfbb      	ittet	lt
 8002a0e:	425b      	neglt	r3, r3
 8002a10:	f042 0202 	orrlt.w	r2, r2, #2
 8002a14:	9307      	strge	r3, [sp, #28]
 8002a16:	9307      	strlt	r3, [sp, #28]
 8002a18:	bfb8      	it	lt
 8002a1a:	9204      	strlt	r2, [sp, #16]
 8002a1c:	7823      	ldrb	r3, [r4, #0]
 8002a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a20:	d10c      	bne.n	8002a3c <_svfiprintf_r+0x130>
 8002a22:	7863      	ldrb	r3, [r4, #1]
 8002a24:	2b2a      	cmp	r3, #42	; 0x2a
 8002a26:	d135      	bne.n	8002a94 <_svfiprintf_r+0x188>
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	1d1a      	adds	r2, r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	9203      	str	r2, [sp, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bfb8      	it	lt
 8002a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a38:	3402      	adds	r4, #2
 8002a3a:	9305      	str	r3, [sp, #20]
 8002a3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b08 <_svfiprintf_r+0x1fc>
 8002a40:	7821      	ldrb	r1, [r4, #0]
 8002a42:	2203      	movs	r2, #3
 8002a44:	4650      	mov	r0, sl
 8002a46:	f7fd fbeb 	bl	8000220 <memchr>
 8002a4a:	b140      	cbz	r0, 8002a5e <_svfiprintf_r+0x152>
 8002a4c:	2340      	movs	r3, #64	; 0x40
 8002a4e:	eba0 000a 	sub.w	r0, r0, sl
 8002a52:	fa03 f000 	lsl.w	r0, r3, r0
 8002a56:	9b04      	ldr	r3, [sp, #16]
 8002a58:	4303      	orrs	r3, r0
 8002a5a:	3401      	adds	r4, #1
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a62:	4826      	ldr	r0, [pc, #152]	; (8002afc <_svfiprintf_r+0x1f0>)
 8002a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a68:	2206      	movs	r2, #6
 8002a6a:	f7fd fbd9 	bl	8000220 <memchr>
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d038      	beq.n	8002ae4 <_svfiprintf_r+0x1d8>
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <_svfiprintf_r+0x1f4>)
 8002a74:	bb1b      	cbnz	r3, 8002abe <_svfiprintf_r+0x1b2>
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	3308      	adds	r3, #8
 8002a80:	9303      	str	r3, [sp, #12]
 8002a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a84:	4433      	add	r3, r6
 8002a86:	9309      	str	r3, [sp, #36]	; 0x24
 8002a88:	e767      	b.n	800295a <_svfiprintf_r+0x4e>
 8002a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a8e:	460c      	mov	r4, r1
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7a5      	b.n	80029e0 <_svfiprintf_r+0xd4>
 8002a94:	2300      	movs	r3, #0
 8002a96:	3401      	adds	r4, #1
 8002a98:	9305      	str	r3, [sp, #20]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 0c0a 	mov.w	ip, #10
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aa6:	3a30      	subs	r2, #48	; 0x30
 8002aa8:	2a09      	cmp	r2, #9
 8002aaa:	d903      	bls.n	8002ab4 <_svfiprintf_r+0x1a8>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0c5      	beq.n	8002a3c <_svfiprintf_r+0x130>
 8002ab0:	9105      	str	r1, [sp, #20]
 8002ab2:	e7c3      	b.n	8002a3c <_svfiprintf_r+0x130>
 8002ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ab8:	4604      	mov	r4, r0
 8002aba:	2301      	movs	r3, #1
 8002abc:	e7f0      	b.n	8002aa0 <_svfiprintf_r+0x194>
 8002abe:	ab03      	add	r3, sp, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	462a      	mov	r2, r5
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <_svfiprintf_r+0x1f8>)
 8002ac6:	a904      	add	r1, sp, #16
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f3af 8000 	nop.w
 8002ace:	1c42      	adds	r2, r0, #1
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	d1d6      	bne.n	8002a82 <_svfiprintf_r+0x176>
 8002ad4:	89ab      	ldrh	r3, [r5, #12]
 8002ad6:	065b      	lsls	r3, r3, #25
 8002ad8:	f53f af2c 	bmi.w	8002934 <_svfiprintf_r+0x28>
 8002adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ade:	b01d      	add	sp, #116	; 0x74
 8002ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae4:	ab03      	add	r3, sp, #12
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	462a      	mov	r2, r5
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <_svfiprintf_r+0x1f8>)
 8002aec:	a904      	add	r1, sp, #16
 8002aee:	4638      	mov	r0, r7
 8002af0:	f000 f87a 	bl	8002be8 <_printf_i>
 8002af4:	e7eb      	b.n	8002ace <_svfiprintf_r+0x1c2>
 8002af6:	bf00      	nop
 8002af8:	080031c3 	.word	0x080031c3
 8002afc:	080031cd 	.word	0x080031cd
 8002b00:	00000000 	.word	0x00000000
 8002b04:	08002855 	.word	0x08002855
 8002b08:	080031c9 	.word	0x080031c9

08002b0c <_printf_common>:
 8002b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b10:	4616      	mov	r6, r2
 8002b12:	4699      	mov	r9, r3
 8002b14:	688a      	ldr	r2, [r1, #8]
 8002b16:	690b      	ldr	r3, [r1, #16]
 8002b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bfb8      	it	lt
 8002b20:	4613      	movlt	r3, r2
 8002b22:	6033      	str	r3, [r6, #0]
 8002b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b28:	4607      	mov	r7, r0
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	b10a      	cbz	r2, 8002b32 <_printf_common+0x26>
 8002b2e:	3301      	adds	r3, #1
 8002b30:	6033      	str	r3, [r6, #0]
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	0699      	lsls	r1, r3, #26
 8002b36:	bf42      	ittt	mi
 8002b38:	6833      	ldrmi	r3, [r6, #0]
 8002b3a:	3302      	addmi	r3, #2
 8002b3c:	6033      	strmi	r3, [r6, #0]
 8002b3e:	6825      	ldr	r5, [r4, #0]
 8002b40:	f015 0506 	ands.w	r5, r5, #6
 8002b44:	d106      	bne.n	8002b54 <_printf_common+0x48>
 8002b46:	f104 0a19 	add.w	sl, r4, #25
 8002b4a:	68e3      	ldr	r3, [r4, #12]
 8002b4c:	6832      	ldr	r2, [r6, #0]
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	42ab      	cmp	r3, r5
 8002b52:	dc26      	bgt.n	8002ba2 <_printf_common+0x96>
 8002b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b58:	1e13      	subs	r3, r2, #0
 8002b5a:	6822      	ldr	r2, [r4, #0]
 8002b5c:	bf18      	it	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	0692      	lsls	r2, r2, #26
 8002b62:	d42b      	bmi.n	8002bbc <_printf_common+0xb0>
 8002b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b68:	4649      	mov	r1, r9
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	47c0      	blx	r8
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d01e      	beq.n	8002bb0 <_printf_common+0xa4>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	68e5      	ldr	r5, [r4, #12]
 8002b76:	6832      	ldr	r2, [r6, #0]
 8002b78:	f003 0306 	and.w	r3, r3, #6
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	bf08      	it	eq
 8002b80:	1aad      	subeq	r5, r5, r2
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	6922      	ldr	r2, [r4, #16]
 8002b86:	bf0c      	ite	eq
 8002b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b8c:	2500      	movne	r5, #0
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bfc4      	itt	gt
 8002b92:	1a9b      	subgt	r3, r3, r2
 8002b94:	18ed      	addgt	r5, r5, r3
 8002b96:	2600      	movs	r6, #0
 8002b98:	341a      	adds	r4, #26
 8002b9a:	42b5      	cmp	r5, r6
 8002b9c:	d11a      	bne.n	8002bd4 <_printf_common+0xc8>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e008      	b.n	8002bb4 <_printf_common+0xa8>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4652      	mov	r2, sl
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	4638      	mov	r0, r7
 8002baa:	47c0      	blx	r8
 8002bac:	3001      	adds	r0, #1
 8002bae:	d103      	bne.n	8002bb8 <_printf_common+0xac>
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7c6      	b.n	8002b4a <_printf_common+0x3e>
 8002bbc:	18e1      	adds	r1, r4, r3
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	2030      	movs	r0, #48	; 0x30
 8002bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bc6:	4422      	add	r2, r4
 8002bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	e7c7      	b.n	8002b64 <_printf_common+0x58>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4638      	mov	r0, r7
 8002bdc:	47c0      	blx	r8
 8002bde:	3001      	adds	r0, #1
 8002be0:	d0e6      	beq.n	8002bb0 <_printf_common+0xa4>
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7d9      	b.n	8002b9a <_printf_common+0x8e>
	...

08002be8 <_printf_i>:
 8002be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bec:	7e0f      	ldrb	r7, [r1, #24]
 8002bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bf0:	2f78      	cmp	r7, #120	; 0x78
 8002bf2:	4691      	mov	r9, r2
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	469a      	mov	sl, r3
 8002bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bfe:	d807      	bhi.n	8002c10 <_printf_i+0x28>
 8002c00:	2f62      	cmp	r7, #98	; 0x62
 8002c02:	d80a      	bhi.n	8002c1a <_printf_i+0x32>
 8002c04:	2f00      	cmp	r7, #0
 8002c06:	f000 80d8 	beq.w	8002dba <_printf_i+0x1d2>
 8002c0a:	2f58      	cmp	r7, #88	; 0x58
 8002c0c:	f000 80a3 	beq.w	8002d56 <_printf_i+0x16e>
 8002c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c18:	e03a      	b.n	8002c90 <_printf_i+0xa8>
 8002c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c1e:	2b15      	cmp	r3, #21
 8002c20:	d8f6      	bhi.n	8002c10 <_printf_i+0x28>
 8002c22:	a101      	add	r1, pc, #4	; (adr r1, 8002c28 <_printf_i+0x40>)
 8002c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c28:	08002c81 	.word	0x08002c81
 8002c2c:	08002c95 	.word	0x08002c95
 8002c30:	08002c11 	.word	0x08002c11
 8002c34:	08002c11 	.word	0x08002c11
 8002c38:	08002c11 	.word	0x08002c11
 8002c3c:	08002c11 	.word	0x08002c11
 8002c40:	08002c95 	.word	0x08002c95
 8002c44:	08002c11 	.word	0x08002c11
 8002c48:	08002c11 	.word	0x08002c11
 8002c4c:	08002c11 	.word	0x08002c11
 8002c50:	08002c11 	.word	0x08002c11
 8002c54:	08002da1 	.word	0x08002da1
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002d83 	.word	0x08002d83
 8002c60:	08002c11 	.word	0x08002c11
 8002c64:	08002c11 	.word	0x08002c11
 8002c68:	08002dc3 	.word	0x08002dc3
 8002c6c:	08002c11 	.word	0x08002c11
 8002c70:	08002cc5 	.word	0x08002cc5
 8002c74:	08002c11 	.word	0x08002c11
 8002c78:	08002c11 	.word	0x08002c11
 8002c7c:	08002d8b 	.word	0x08002d8b
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	602a      	str	r2, [r5, #0]
 8002c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a3      	b.n	8002ddc <_printf_i+0x1f4>
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	6829      	ldr	r1, [r5, #0]
 8002c98:	0606      	lsls	r6, r0, #24
 8002c9a:	f101 0304 	add.w	r3, r1, #4
 8002c9e:	d50a      	bpl.n	8002cb6 <_printf_i+0xce>
 8002ca0:	680e      	ldr	r6, [r1, #0]
 8002ca2:	602b      	str	r3, [r5, #0]
 8002ca4:	2e00      	cmp	r6, #0
 8002ca6:	da03      	bge.n	8002cb0 <_printf_i+0xc8>
 8002ca8:	232d      	movs	r3, #45	; 0x2d
 8002caa:	4276      	negs	r6, r6
 8002cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb0:	485e      	ldr	r0, [pc, #376]	; (8002e2c <_printf_i+0x244>)
 8002cb2:	230a      	movs	r3, #10
 8002cb4:	e019      	b.n	8002cea <_printf_i+0x102>
 8002cb6:	680e      	ldr	r6, [r1, #0]
 8002cb8:	602b      	str	r3, [r5, #0]
 8002cba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cbe:	bf18      	it	ne
 8002cc0:	b236      	sxthne	r6, r6
 8002cc2:	e7ef      	b.n	8002ca4 <_printf_i+0xbc>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	6820      	ldr	r0, [r4, #0]
 8002cc8:	1d19      	adds	r1, r3, #4
 8002cca:	6029      	str	r1, [r5, #0]
 8002ccc:	0601      	lsls	r1, r0, #24
 8002cce:	d501      	bpl.n	8002cd4 <_printf_i+0xec>
 8002cd0:	681e      	ldr	r6, [r3, #0]
 8002cd2:	e002      	b.n	8002cda <_printf_i+0xf2>
 8002cd4:	0646      	lsls	r6, r0, #25
 8002cd6:	d5fb      	bpl.n	8002cd0 <_printf_i+0xe8>
 8002cd8:	881e      	ldrh	r6, [r3, #0]
 8002cda:	4854      	ldr	r0, [pc, #336]	; (8002e2c <_printf_i+0x244>)
 8002cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8002cde:	bf0c      	ite	eq
 8002ce0:	2308      	moveq	r3, #8
 8002ce2:	230a      	movne	r3, #10
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cea:	6865      	ldr	r5, [r4, #4]
 8002cec:	60a5      	str	r5, [r4, #8]
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	bfa2      	ittt	ge
 8002cf2:	6821      	ldrge	r1, [r4, #0]
 8002cf4:	f021 0104 	bicge.w	r1, r1, #4
 8002cf8:	6021      	strge	r1, [r4, #0]
 8002cfa:	b90e      	cbnz	r6, 8002d00 <_printf_i+0x118>
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	d04d      	beq.n	8002d9c <_printf_i+0x1b4>
 8002d00:	4615      	mov	r5, r2
 8002d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d06:	fb03 6711 	mls	r7, r3, r1, r6
 8002d0a:	5dc7      	ldrb	r7, [r0, r7]
 8002d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d10:	4637      	mov	r7, r6
 8002d12:	42bb      	cmp	r3, r7
 8002d14:	460e      	mov	r6, r1
 8002d16:	d9f4      	bls.n	8002d02 <_printf_i+0x11a>
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d10b      	bne.n	8002d34 <_printf_i+0x14c>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	07de      	lsls	r6, r3, #31
 8002d20:	d508      	bpl.n	8002d34 <_printf_i+0x14c>
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	6861      	ldr	r1, [r4, #4]
 8002d26:	4299      	cmp	r1, r3
 8002d28:	bfde      	ittt	le
 8002d2a:	2330      	movle	r3, #48	; 0x30
 8002d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d34:	1b52      	subs	r2, r2, r5
 8002d36:	6122      	str	r2, [r4, #16]
 8002d38:	f8cd a000 	str.w	sl, [sp]
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	aa03      	add	r2, sp, #12
 8002d40:	4621      	mov	r1, r4
 8002d42:	4640      	mov	r0, r8
 8002d44:	f7ff fee2 	bl	8002b0c <_printf_common>
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d14c      	bne.n	8002de6 <_printf_i+0x1fe>
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	b004      	add	sp, #16
 8002d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d56:	4835      	ldr	r0, [pc, #212]	; (8002e2c <_printf_i+0x244>)
 8002d58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d5c:	6829      	ldr	r1, [r5, #0]
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d64:	6029      	str	r1, [r5, #0]
 8002d66:	061d      	lsls	r5, r3, #24
 8002d68:	d514      	bpl.n	8002d94 <_printf_i+0x1ac>
 8002d6a:	07df      	lsls	r7, r3, #31
 8002d6c:	bf44      	itt	mi
 8002d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8002d72:	6023      	strmi	r3, [r4, #0]
 8002d74:	b91e      	cbnz	r6, 8002d7e <_printf_i+0x196>
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	f023 0320 	bic.w	r3, r3, #32
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	2310      	movs	r3, #16
 8002d80:	e7b0      	b.n	8002ce4 <_printf_i+0xfc>
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	2378      	movs	r3, #120	; 0x78
 8002d8c:	4828      	ldr	r0, [pc, #160]	; (8002e30 <_printf_i+0x248>)
 8002d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d92:	e7e3      	b.n	8002d5c <_printf_i+0x174>
 8002d94:	0659      	lsls	r1, r3, #25
 8002d96:	bf48      	it	mi
 8002d98:	b2b6      	uxthmi	r6, r6
 8002d9a:	e7e6      	b.n	8002d6a <_printf_i+0x182>
 8002d9c:	4615      	mov	r5, r2
 8002d9e:	e7bb      	b.n	8002d18 <_printf_i+0x130>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	6826      	ldr	r6, [r4, #0]
 8002da4:	6961      	ldr	r1, [r4, #20]
 8002da6:	1d18      	adds	r0, r3, #4
 8002da8:	6028      	str	r0, [r5, #0]
 8002daa:	0635      	lsls	r5, r6, #24
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	d501      	bpl.n	8002db4 <_printf_i+0x1cc>
 8002db0:	6019      	str	r1, [r3, #0]
 8002db2:	e002      	b.n	8002dba <_printf_i+0x1d2>
 8002db4:	0670      	lsls	r0, r6, #25
 8002db6:	d5fb      	bpl.n	8002db0 <_printf_i+0x1c8>
 8002db8:	8019      	strh	r1, [r3, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6123      	str	r3, [r4, #16]
 8002dbe:	4615      	mov	r5, r2
 8002dc0:	e7ba      	b.n	8002d38 <_printf_i+0x150>
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	1d1a      	adds	r2, r3, #4
 8002dc6:	602a      	str	r2, [r5, #0]
 8002dc8:	681d      	ldr	r5, [r3, #0]
 8002dca:	6862      	ldr	r2, [r4, #4]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f7fd fa26 	bl	8000220 <memchr>
 8002dd4:	b108      	cbz	r0, 8002dda <_printf_i+0x1f2>
 8002dd6:	1b40      	subs	r0, r0, r5
 8002dd8:	6060      	str	r0, [r4, #4]
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	2300      	movs	r3, #0
 8002de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de4:	e7a8      	b.n	8002d38 <_printf_i+0x150>
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	462a      	mov	r2, r5
 8002dea:	4649      	mov	r1, r9
 8002dec:	4640      	mov	r0, r8
 8002dee:	47d0      	blx	sl
 8002df0:	3001      	adds	r0, #1
 8002df2:	d0ab      	beq.n	8002d4c <_printf_i+0x164>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	079b      	lsls	r3, r3, #30
 8002df8:	d413      	bmi.n	8002e22 <_printf_i+0x23a>
 8002dfa:	68e0      	ldr	r0, [r4, #12]
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	4298      	cmp	r0, r3
 8002e00:	bfb8      	it	lt
 8002e02:	4618      	movlt	r0, r3
 8002e04:	e7a4      	b.n	8002d50 <_printf_i+0x168>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4632      	mov	r2, r6
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	47d0      	blx	sl
 8002e10:	3001      	adds	r0, #1
 8002e12:	d09b      	beq.n	8002d4c <_printf_i+0x164>
 8002e14:	3501      	adds	r5, #1
 8002e16:	68e3      	ldr	r3, [r4, #12]
 8002e18:	9903      	ldr	r1, [sp, #12]
 8002e1a:	1a5b      	subs	r3, r3, r1
 8002e1c:	42ab      	cmp	r3, r5
 8002e1e:	dcf2      	bgt.n	8002e06 <_printf_i+0x21e>
 8002e20:	e7eb      	b.n	8002dfa <_printf_i+0x212>
 8002e22:	2500      	movs	r5, #0
 8002e24:	f104 0619 	add.w	r6, r4, #25
 8002e28:	e7f5      	b.n	8002e16 <_printf_i+0x22e>
 8002e2a:	bf00      	nop
 8002e2c:	080031d4 	.word	0x080031d4
 8002e30:	080031e5 	.word	0x080031e5

08002e34 <memcpy>:
 8002e34:	440a      	add	r2, r1
 8002e36:	4291      	cmp	r1, r2
 8002e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e3c:	d100      	bne.n	8002e40 <memcpy+0xc>
 8002e3e:	4770      	bx	lr
 8002e40:	b510      	push	{r4, lr}
 8002e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e4a:	4291      	cmp	r1, r2
 8002e4c:	d1f9      	bne.n	8002e42 <memcpy+0xe>
 8002e4e:	bd10      	pop	{r4, pc}

08002e50 <memmove>:
 8002e50:	4288      	cmp	r0, r1
 8002e52:	b510      	push	{r4, lr}
 8002e54:	eb01 0402 	add.w	r4, r1, r2
 8002e58:	d902      	bls.n	8002e60 <memmove+0x10>
 8002e5a:	4284      	cmp	r4, r0
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	d807      	bhi.n	8002e70 <memmove+0x20>
 8002e60:	1e43      	subs	r3, r0, #1
 8002e62:	42a1      	cmp	r1, r4
 8002e64:	d008      	beq.n	8002e78 <memmove+0x28>
 8002e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e6e:	e7f8      	b.n	8002e62 <memmove+0x12>
 8002e70:	4402      	add	r2, r0
 8002e72:	4601      	mov	r1, r0
 8002e74:	428a      	cmp	r2, r1
 8002e76:	d100      	bne.n	8002e7a <memmove+0x2a>
 8002e78:	bd10      	pop	{r4, pc}
 8002e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e82:	e7f7      	b.n	8002e74 <memmove+0x24>

08002e84 <_free_r>:
 8002e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d044      	beq.n	8002f14 <_free_r+0x90>
 8002e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e8e:	9001      	str	r0, [sp, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f1a1 0404 	sub.w	r4, r1, #4
 8002e96:	bfb8      	it	lt
 8002e98:	18e4      	addlt	r4, r4, r3
 8002e9a:	f000 f913 	bl	80030c4 <__malloc_lock>
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <_free_r+0x94>)
 8002ea0:	9801      	ldr	r0, [sp, #4]
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	b933      	cbnz	r3, 8002eb4 <_free_r+0x30>
 8002ea6:	6063      	str	r3, [r4, #4]
 8002ea8:	6014      	str	r4, [r2, #0]
 8002eaa:	b003      	add	sp, #12
 8002eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002eb0:	f000 b90e 	b.w	80030d0 <__malloc_unlock>
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d908      	bls.n	8002eca <_free_r+0x46>
 8002eb8:	6825      	ldr	r5, [r4, #0]
 8002eba:	1961      	adds	r1, r4, r5
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	bf01      	itttt	eq
 8002ec0:	6819      	ldreq	r1, [r3, #0]
 8002ec2:	685b      	ldreq	r3, [r3, #4]
 8002ec4:	1949      	addeq	r1, r1, r5
 8002ec6:	6021      	streq	r1, [r4, #0]
 8002ec8:	e7ed      	b.n	8002ea6 <_free_r+0x22>
 8002eca:	461a      	mov	r2, r3
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b10b      	cbz	r3, 8002ed4 <_free_r+0x50>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d9fa      	bls.n	8002eca <_free_r+0x46>
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	1855      	adds	r5, r2, r1
 8002ed8:	42a5      	cmp	r5, r4
 8002eda:	d10b      	bne.n	8002ef4 <_free_r+0x70>
 8002edc:	6824      	ldr	r4, [r4, #0]
 8002ede:	4421      	add	r1, r4
 8002ee0:	1854      	adds	r4, r2, r1
 8002ee2:	42a3      	cmp	r3, r4
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	d1e0      	bne.n	8002eaa <_free_r+0x26>
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6053      	str	r3, [r2, #4]
 8002eee:	4421      	add	r1, r4
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	e7da      	b.n	8002eaa <_free_r+0x26>
 8002ef4:	d902      	bls.n	8002efc <_free_r+0x78>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	6003      	str	r3, [r0, #0]
 8002efa:	e7d6      	b.n	8002eaa <_free_r+0x26>
 8002efc:	6825      	ldr	r5, [r4, #0]
 8002efe:	1961      	adds	r1, r4, r5
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf04      	itt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	6063      	str	r3, [r4, #4]
 8002f0a:	bf04      	itt	eq
 8002f0c:	1949      	addeq	r1, r1, r5
 8002f0e:	6021      	streq	r1, [r4, #0]
 8002f10:	6054      	str	r4, [r2, #4]
 8002f12:	e7ca      	b.n	8002eaa <_free_r+0x26>
 8002f14:	b003      	add	sp, #12
 8002f16:	bd30      	pop	{r4, r5, pc}
 8002f18:	20000158 	.word	0x20000158

08002f1c <sbrk_aligned>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4e0e      	ldr	r6, [pc, #56]	; (8002f58 <sbrk_aligned+0x3c>)
 8002f20:	460c      	mov	r4, r1
 8002f22:	6831      	ldr	r1, [r6, #0]
 8002f24:	4605      	mov	r5, r0
 8002f26:	b911      	cbnz	r1, 8002f2e <sbrk_aligned+0x12>
 8002f28:	f000 f8bc 	bl	80030a4 <_sbrk_r>
 8002f2c:	6030      	str	r0, [r6, #0]
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 f8b7 	bl	80030a4 <_sbrk_r>
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	d00a      	beq.n	8002f50 <sbrk_aligned+0x34>
 8002f3a:	1cc4      	adds	r4, r0, #3
 8002f3c:	f024 0403 	bic.w	r4, r4, #3
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d007      	beq.n	8002f54 <sbrk_aligned+0x38>
 8002f44:	1a21      	subs	r1, r4, r0
 8002f46:	4628      	mov	r0, r5
 8002f48:	f000 f8ac 	bl	80030a4 <_sbrk_r>
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d101      	bne.n	8002f54 <sbrk_aligned+0x38>
 8002f50:	f04f 34ff 	mov.w	r4, #4294967295
 8002f54:	4620      	mov	r0, r4
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	2000015c 	.word	0x2000015c

08002f5c <_malloc_r>:
 8002f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f60:	1ccd      	adds	r5, r1, #3
 8002f62:	f025 0503 	bic.w	r5, r5, #3
 8002f66:	3508      	adds	r5, #8
 8002f68:	2d0c      	cmp	r5, #12
 8002f6a:	bf38      	it	cc
 8002f6c:	250c      	movcc	r5, #12
 8002f6e:	2d00      	cmp	r5, #0
 8002f70:	4607      	mov	r7, r0
 8002f72:	db01      	blt.n	8002f78 <_malloc_r+0x1c>
 8002f74:	42a9      	cmp	r1, r5
 8002f76:	d905      	bls.n	8002f84 <_malloc_r+0x28>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	4630      	mov	r0, r6
 8002f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f84:	4e2e      	ldr	r6, [pc, #184]	; (8003040 <_malloc_r+0xe4>)
 8002f86:	f000 f89d 	bl	80030c4 <__malloc_lock>
 8002f8a:	6833      	ldr	r3, [r6, #0]
 8002f8c:	461c      	mov	r4, r3
 8002f8e:	bb34      	cbnz	r4, 8002fde <_malloc_r+0x82>
 8002f90:	4629      	mov	r1, r5
 8002f92:	4638      	mov	r0, r7
 8002f94:	f7ff ffc2 	bl	8002f1c <sbrk_aligned>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	d14d      	bne.n	800303a <_malloc_r+0xde>
 8002f9e:	6834      	ldr	r4, [r6, #0]
 8002fa0:	4626      	mov	r6, r4
 8002fa2:	2e00      	cmp	r6, #0
 8002fa4:	d140      	bne.n	8003028 <_malloc_r+0xcc>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	4631      	mov	r1, r6
 8002faa:	4638      	mov	r0, r7
 8002fac:	eb04 0803 	add.w	r8, r4, r3
 8002fb0:	f000 f878 	bl	80030a4 <_sbrk_r>
 8002fb4:	4580      	cmp	r8, r0
 8002fb6:	d13a      	bne.n	800302e <_malloc_r+0xd2>
 8002fb8:	6821      	ldr	r1, [r4, #0]
 8002fba:	3503      	adds	r5, #3
 8002fbc:	1a6d      	subs	r5, r5, r1
 8002fbe:	f025 0503 	bic.w	r5, r5, #3
 8002fc2:	3508      	adds	r5, #8
 8002fc4:	2d0c      	cmp	r5, #12
 8002fc6:	bf38      	it	cc
 8002fc8:	250c      	movcc	r5, #12
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f7ff ffa5 	bl	8002f1c <sbrk_aligned>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d02b      	beq.n	800302e <_malloc_r+0xd2>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	442b      	add	r3, r5
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	e00e      	b.n	8002ffc <_malloc_r+0xa0>
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	1b52      	subs	r2, r2, r5
 8002fe2:	d41e      	bmi.n	8003022 <_malloc_r+0xc6>
 8002fe4:	2a0b      	cmp	r2, #11
 8002fe6:	d916      	bls.n	8003016 <_malloc_r+0xba>
 8002fe8:	1961      	adds	r1, r4, r5
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	6025      	str	r5, [r4, #0]
 8002fee:	bf18      	it	ne
 8002ff0:	6059      	strne	r1, [r3, #4]
 8002ff2:	6863      	ldr	r3, [r4, #4]
 8002ff4:	bf08      	it	eq
 8002ff6:	6031      	streq	r1, [r6, #0]
 8002ff8:	5162      	str	r2, [r4, r5]
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	f104 060b 	add.w	r6, r4, #11
 8003002:	f000 f865 	bl	80030d0 <__malloc_unlock>
 8003006:	f026 0607 	bic.w	r6, r6, #7
 800300a:	1d23      	adds	r3, r4, #4
 800300c:	1af2      	subs	r2, r6, r3
 800300e:	d0b6      	beq.n	8002f7e <_malloc_r+0x22>
 8003010:	1b9b      	subs	r3, r3, r6
 8003012:	50a3      	str	r3, [r4, r2]
 8003014:	e7b3      	b.n	8002f7e <_malloc_r+0x22>
 8003016:	6862      	ldr	r2, [r4, #4]
 8003018:	42a3      	cmp	r3, r4
 800301a:	bf0c      	ite	eq
 800301c:	6032      	streq	r2, [r6, #0]
 800301e:	605a      	strne	r2, [r3, #4]
 8003020:	e7ec      	b.n	8002ffc <_malloc_r+0xa0>
 8003022:	4623      	mov	r3, r4
 8003024:	6864      	ldr	r4, [r4, #4]
 8003026:	e7b2      	b.n	8002f8e <_malloc_r+0x32>
 8003028:	4634      	mov	r4, r6
 800302a:	6876      	ldr	r6, [r6, #4]
 800302c:	e7b9      	b.n	8002fa2 <_malloc_r+0x46>
 800302e:	230c      	movs	r3, #12
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4638      	mov	r0, r7
 8003034:	f000 f84c 	bl	80030d0 <__malloc_unlock>
 8003038:	e7a1      	b.n	8002f7e <_malloc_r+0x22>
 800303a:	6025      	str	r5, [r4, #0]
 800303c:	e7de      	b.n	8002ffc <_malloc_r+0xa0>
 800303e:	bf00      	nop
 8003040:	20000158 	.word	0x20000158

08003044 <_realloc_r>:
 8003044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003048:	4680      	mov	r8, r0
 800304a:	4614      	mov	r4, r2
 800304c:	460e      	mov	r6, r1
 800304e:	b921      	cbnz	r1, 800305a <_realloc_r+0x16>
 8003050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003054:	4611      	mov	r1, r2
 8003056:	f7ff bf81 	b.w	8002f5c <_malloc_r>
 800305a:	b92a      	cbnz	r2, 8003068 <_realloc_r+0x24>
 800305c:	f7ff ff12 	bl	8002e84 <_free_r>
 8003060:	4625      	mov	r5, r4
 8003062:	4628      	mov	r0, r5
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	f000 f838 	bl	80030dc <_malloc_usable_size_r>
 800306c:	4284      	cmp	r4, r0
 800306e:	4607      	mov	r7, r0
 8003070:	d802      	bhi.n	8003078 <_realloc_r+0x34>
 8003072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003076:	d812      	bhi.n	800309e <_realloc_r+0x5a>
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f7ff ff6e 	bl	8002f5c <_malloc_r>
 8003080:	4605      	mov	r5, r0
 8003082:	2800      	cmp	r0, #0
 8003084:	d0ed      	beq.n	8003062 <_realloc_r+0x1e>
 8003086:	42bc      	cmp	r4, r7
 8003088:	4622      	mov	r2, r4
 800308a:	4631      	mov	r1, r6
 800308c:	bf28      	it	cs
 800308e:	463a      	movcs	r2, r7
 8003090:	f7ff fed0 	bl	8002e34 <memcpy>
 8003094:	4631      	mov	r1, r6
 8003096:	4640      	mov	r0, r8
 8003098:	f7ff fef4 	bl	8002e84 <_free_r>
 800309c:	e7e1      	b.n	8003062 <_realloc_r+0x1e>
 800309e:	4635      	mov	r5, r6
 80030a0:	e7df      	b.n	8003062 <_realloc_r+0x1e>
	...

080030a4 <_sbrk_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4d06      	ldr	r5, [pc, #24]	; (80030c0 <_sbrk_r+0x1c>)
 80030a8:	2300      	movs	r3, #0
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	f000 f81e 	bl	80030f0 <_sbrk>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d102      	bne.n	80030be <_sbrk_r+0x1a>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	b103      	cbz	r3, 80030be <_sbrk_r+0x1a>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	20000160 	.word	0x20000160

080030c4 <__malloc_lock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	; (80030cc <__malloc_lock+0x8>)
 80030c6:	f000 b811 	b.w	80030ec <__retarget_lock_acquire_recursive>
 80030ca:	bf00      	nop
 80030cc:	20000164 	.word	0x20000164

080030d0 <__malloc_unlock>:
 80030d0:	4801      	ldr	r0, [pc, #4]	; (80030d8 <__malloc_unlock+0x8>)
 80030d2:	f000 b80c 	b.w	80030ee <__retarget_lock_release_recursive>
 80030d6:	bf00      	nop
 80030d8:	20000164 	.word	0x20000164

080030dc <_malloc_usable_size_r>:
 80030dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e0:	1f18      	subs	r0, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bfbc      	itt	lt
 80030e6:	580b      	ldrlt	r3, [r1, r0]
 80030e8:	18c0      	addlt	r0, r0, r3
 80030ea:	4770      	bx	lr

080030ec <__retarget_lock_acquire_recursive>:
 80030ec:	4770      	bx	lr

080030ee <__retarget_lock_release_recursive>:
 80030ee:	4770      	bx	lr

080030f0 <_sbrk>:
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <_sbrk+0x14>)
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	b909      	cbnz	r1, 80030fc <_sbrk+0xc>
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <_sbrk+0x18>)
 80030fa:	6011      	str	r1, [r2, #0]
 80030fc:	6810      	ldr	r0, [r2, #0]
 80030fe:	4403      	add	r3, r0
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4770      	bx	lr
 8003104:	20000168 	.word	0x20000168
 8003108:	20000170 	.word	0x20000170

0800310c <_init>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr

08003118 <_fini>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr
